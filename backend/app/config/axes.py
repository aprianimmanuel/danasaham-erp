from __future__ import annotations

from datetime import timedelta
from os import getenv

# Django Axes settings
AXES_ENABLED = getenv("AXES_ENABLED", default="true").lower() == "true"
AXES_FAILURE_LIMIT = int(getenv("AXES_FAILURE_LIMIT", default="5"))
AXES_COOLOFF_TIME = getenv("AXES_COOLOFF_TIME", default=None)
AXES_COOLOFF_TIME = (
    timedelta(minutes=int(AXES_COOLOFF_TIME)) if AXES_COOLOFF_TIME else None
)

AXES_LOCKOUT_PARAMETERS = getenv("AXES_LOCKOUT_PARAMETERS", default=None)
AXES_LOCKOUT_PARAMETERS = (
    AXES_LOCKOUT_PARAMETERS.split(",") if AXES_LOCKOUT_PARAMETERS else None
)

AXES_CLIENT_IP_CALLABLE = getenv("AXES_CLIENT_IP_CALLABLE", default=None)
AXES_CLIENT_STR_CALLABLE = getenv("AXES_CLIENT_STR_CALLABLE", default=None)
AXES_LOCKOUT_CALLABLE = getenv("AXES_LOCKOUT_CALLABLE", default=None)
AXES_USERNAME_CALLABLE = getenv("AXES_USERNAME_CALLABLE", default=None)
AXES_USERNAME_FORM_FIELD = getenv("AXES_USERNAME_FORM_FIELD", default="login")
AXES_WHITELIST_CALLABLE = getenv("AXES_WHITELIST_CALLABLE", default=None)

AXES_LOCKOUT_URL = getenv("AXES_LOCKOUT_URL", default=None)
AXES_LOCKOUT_TEMPLATE = getenv("AXES_LOCKOUT_TEMPLATE", default=None)

AXES_IPWARE_PROXY_ORDER = getenv("AXES_IPWARE_PROXY_ORDER", default=None)
AXES_IPWARE_PROXY_COUNT = getenv("AXES_IPWARE_PROXY_COUNT", default=None)
AXES_IPWARE_PROXY_TRUSTED_IPS = getenv("AXES_IPWARE_PROXY_TRUSTED_IPS", default=None)
AXES_IPWARE_META_PRECEDENCE_ORDER = getenv(
    "AXES_IPWARE_META_PRECEDENCE_ORDER",
    default=None,
)

AXES_RESET_ON_SUCCESS = (
    getenv("AXES_RESET_ON_SUCCESS", default="true").lower() == "true"
)
AXES_DISABLE_ACCESS_LOG = (
    getenv("AXES_DISABLE_ACCESS_LOG", default="false").lower() == "true"
)
AXES_ONLY_USER_FAILURES = (
    getenv("AXES_ONLY_USER_FAILURES", default="false").lower() == "true"
)
AXES_LOCK_OUT_AT_FAILURE = (
    getenv("AXES_LOCK_OUT_AT_FAILURE", default="true").lower() == "true"
)

AXES_USE_USER_AGENT = getenv("AXES_USE_USER_AGENT", default="false").lower() == "true"
AXES_VERBOSE = getenv("AXES_VERBOSE", default="true").lower() == "true"

AXES_HANDLER = getenv(
    "AXES_HANDLER",
    default="axes.handlers.cache.AxesCacheHandler",
)

AXES_LOGGER = getenv("AXES_LOGGER", default="axes.watch_login")
AXES_LOCKOUT_LOGGER = getenv("AXES_LOCKOUT_LOGGER", default="axes.watch_login")
AXES_ACCESS_FAILURE_LOG = getenv("AXES_ACCESS_FAILURE_LOG", default=True)

AXES_BEHIND_REVERSE_PROXY = (
    getenv("AXES_BEHIND_REVERSE_PROXY", default="false").lower() == "true"
)
AXES_REVERSE_PROXY_HEADER = getenv(
    "AXES_REVERSE_PROXY_HEADER",
    default="HTTP_X_FORWARDED_FOR",
)

# Configuration dict to be used in settings
AXES_CONFIG = {
    "AXES_ENABLED": AXES_ENABLED,
    "AXES_FAILURE_LIMIT": AXES_FAILURE_LIMIT,
    "AXES_COOLOFF_TIME": AXES_COOLOFF_TIME,
    "AXES_LOCKOUT_PARAMETERS": AXES_LOCKOUT_PARAMETERS,
    "AXES_CLIENT_IP_CALLABLE": AXES_CLIENT_IP_CALLABLE,
    "AXES_CLIENT_STR_CALLABLE": AXES_CLIENT_STR_CALLABLE,
    "AXES_LOCKOUT_CALLABLE": AXES_LOCKOUT_CALLABLE,
    "AXES_USERNAME_CALLABLE": AXES_USERNAME_CALLABLE,
    "AXES_WHITELIST_CALLABLE": AXES_WHITELIST_CALLABLE,
    "AXES_LOCKOUT_URL": AXES_LOCKOUT_URL,
    "AXES_LOCKOUT_TEMPLATE": AXES_LOCKOUT_TEMPLATE,
    "AXES_IPWARE_PROXY_ORDER": AXES_IPWARE_PROXY_ORDER,
    "AXES_IPWARE_PROXY_COUNT": AXES_IPWARE_PROXY_COUNT,
    "AXES_IPWARE_PROXY_TRUSTED_IPS": AXES_IPWARE_PROXY_TRUSTED_IPS,
    "AXES_IPWARE_META_PRECEDENCE_ORDER": AXES_IPWARE_META_PRECEDENCE_ORDER,
    "AXES_RESET_ON_SUCCESS": AXES_RESET_ON_SUCCESS,
    "AXES_DISABLE_ACCESS_LOG": AXES_DISABLE_ACCESS_LOG,
    "AXES_ONLY_USER_FAILURES": AXES_ONLY_USER_FAILURES,
    "AXES_LOCK_OUT_AT_FAILURE": AXES_LOCK_OUT_AT_FAILURE,
    "AXES_USE_USER_AGENT": AXES_USE_USER_AGENT,
    "AXES_VERBOSE": AXES_VERBOSE,
    "AXES_HANDLER": AXES_HANDLER,
    "AXES_LOGGER": AXES_LOGGER,
    "AXES_LOCKOUT_LOGGER": AXES_LOCKOUT_LOGGER,
    "AXES_ACCESS_FAILURE_LOG": AXES_ACCESS_FAILURE_LOG,
    "AXES_BEHIND_REVERSE_PROXY": AXES_BEHIND_REVERSE_PROXY,
    "AXES_REVERSE_PROXY_HEADER": AXES_REVERSE_PROXY_HEADER,
}
