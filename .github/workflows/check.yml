name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write

jobs:
  check-code-and-docker-compose:
    name: Check Code and Test with Docker Compose
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        python-version: [ '3.12' ]
        os: [ ubuntu-latest, macos-latest ]

    services:
      db:
        image: postgres:13-alpine
        ports:
          - "5432:5432"
        env:
          POSTGRES_USER: ${{ secrets.POSTGRESQL_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRESQL_PASSWORD }}
          POSTGRES_DB: ${{ secrets.POSTGRESQL_DB }}

      redis:
        image: redis:7.2.5-bookworm
        ports:
          - "6379:6379"

      rabbitmq:
        image: rabbitmq:3-management
        ports:
          - "15672:15672"
          - "5672:5672"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install -U pip
          python -m pip install -r requirements.txt
          python -m pip install -r requirements.dev.txt

      - name: Run linters
        run: make lint

      - name: Run unit tests
        run: make test

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and start Docker Compose services
        run: |
          docker-compose -f docker-compose.yml down -v --rmi all --remove-orphans
          docker-compose -f docker-compose.yml up -d --build

      - name: Create custom temporary media directory and set permissions
        run: |
          docker-compose exec -T app sh -c "mkdir -p /apps/media/test_media && chown -R django-user:django-user /apps/media"

      - name: Run migrations
        run: docker-compose exec -T app make migrate

      - name: Run Docker Compose tests
        run: docker-compose exec -T app make test

      - name: Run Docker Compose linters
        run: docker-compose exec -T app make lint

  dependabot-auto-merge:
    name: 'Dependabot Auto Merge'
    needs: [ check-code-and-docker-compose ]
    runs-on: ubuntu-latest
    if: ${{ github.actor == 'dependabot[bot]' && github.event_name == 'pull_request' }}
    steps:
      - name: Enable auto-merge for Dependabot PRs
        run: gh pr merge --auto --merge "$PR_URL"
        env:
          PR_URL: ${{ github.event.pull_request.html_url }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
