name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: write

jobs:
  check-code-and-docker-compose:
    name: Check Code and Test with Docker Compose
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']

    services:
      db:
        image: postgres:13-alpine
        ports:
          - "5432:5432"
        env:
          POSTGRES_USER: ${{ secrets.DB_USER }}
          POSTGRES_PASSWORD: ${{ secrets.DB_PASSWORD }}
          POSTGRES_DB: ${{ secrets.DB_NAME }}

      redis:
        image: redis:7.2.5-bookworm
        ports:
          - "6379:6379"

      rabbitmq:
        image: rabbitmq:3-management
        ports:
          - "15672:15672"
          - "5672:5672"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Install Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install -U pip
          python -m pip install -r requirements.txt
          python -m pip install -r requirements.dev.txt

      - name: Set up Docker
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            apt-transport-https \
            ca-certificates \
            curl \
            gnupg \
            lsb-release
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
          sudo apt-get update
          sudo apt-get install -y docker-ce docker-ce-cli containerd.io
          sudo usermod -aG docker $USER
          newgrp docker

      - name: Start Docker
        run: |
          sudo systemctl start docker
          sudo systemctl enable docker

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build and start Docker Compose services
        env:
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_PORT: ${{ secrets.DB_PORT }}
          API_PORT: ${{ secrets.API_PORT }}
          RABBITMQ_DASHBOARD_PORT: ${{ secrets.RABBITMQ_DASHBOARD_PORT }}
          CELERY_BROKER_URL: ${{ secrets.CELERY_BROKER_URL }}
          CELERY_RESULT_BACKEND: ${{ secrets.CELERY_RESULT_BACKEND }}
          CELERY_BEAT_SLEEP_INTERVAL: ${{ secrets.CELERY_BEAT_SLEEP_INTERVAL }}
          DJANGO_USER: ${{ secrets.DJANGO_USER }}
          DJANGO_UID: ${{ secrets.DJANGO_UID }}
          DJANGO_GID: ${{ secrets.DJANGO_GID }}
          POSTGRESQL_DATABASE: ${{ secrets.POSTGRESQL_DATABASE }}
          POSTGRESQL_USERNAME: ${{ secrets.POSTGRESQL_USERNAME }}
          POSTGRESQL_HOST: ${{ secrets.POSTGRESQL_HOST }}
          POSTGRESQL_PASSWORD: ${{ secrets.POSTGRESQL_PASSWORD }}
          POSTGRESQL_PORT: ${{ secrets.POSTGRESQL_HOST }}
        run: |
          docker-compose -f docker-compose.yml down -v --rmi all --remove-orphans
          docker-compose -f docker-compose.yml up -d --build

      - name: Run Migrations, Linters and Unit Testing
        env:
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_PORT: ${{ secrets.DB_PORT }}
          DB_HOST: ${{ secrets.DB_HOST }}
          REDIS_HOST: ${{ secrets.REDIS_HOST }}
          REDIS_PORT: ${{ secrets.REDIS_PORT }}
          RABBITMQ_HOST: ${{ secrets.RABBITMQ_HOST }}
          RABBITMQ_PORT: ${{ secrets.RABBITMQ_PORT }}
          CELERY_BROKER_URL: ${{ secrets.CELERY_BROKER_URL }}
          CELERY_RESULT_BACKEND: ${{ secrets.CELERY_RESULT_BACKEND }}
          CELERY_BEAT_SLEEP_INTERVAL: ${{ secrets.CELERY_BEAT_SLEEP_INTERVAL }}
          DJANGO_USER: ${{ secrets.DJANGO_USER }}
          DJANGO_UID: ${{ secrets.DJANGO_UID }}
          DJANGO_GID: ${{ secrets.DJANGO_GID }}
          POSTGRESQL_DATABASE: ${{ secrets.POSTGRESQL_DATABASE }}
          POSTGRESQL_USERNAME: ${{ secrets.POSTGRESQL_USERNAME }}
          POSTGRESQL_HOST: ${{ secrets.POSTGRESQL_HOST }}
          POSTGRESQL_PASSWORD: ${{ secrets.POSTGRESQL_PASSWORD }}
          POSTGRESQL_PORT: ${{ secrets.POSTGRESQL_HOST }}
          DJANGO_SETTINGS_MODULE: 'app.config.settings'
        run: |
          docker-compose -f docker-compose.yml run --rm app sh -c "make migrate"
          docker-compose -f docker-compose.yml run --rm app sh -c "make lint"
          docker-compose -f docker-compose.yml run --rm app sh -c "make test"

  dependabot-auto-merge:
    name: 'Dependabot Auto Merge'
    needs: [check-code-and-docker-compose]
    runs-on: ubuntu-latest
    if: ${{ github.actor == 'dependabot[bot]' && github.event_name == 'pull_request' }}
    steps:
      - name: Enable auto-merge for Dependabot PRs
        run: gh pr merge --auto --merge "$PR_URL"
        env:
          PR_URL: ${{ github.event.pull_request.html_url }}
          GITHUB_TOKEN: ${{ secrets.TOKEN_PAT }}
