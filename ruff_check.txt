backend/app/common/routers.py:22:9: PLR0913 Too many arguments in function definition (6 > 5)
   |
20 |     _paths: list[URLResolver] = field(default_factory=list)
21 |
22 |     def register(
   |         ^^^^^^^^ PLR0913
23 |         self,
24 |         route: str,
   |

backend/app/common/routers.py:25:9: ARG002 Unused method argument: `view`
   |
23 |         self,
24 |         route: str,
25 |         view: T,
   |         ^^^^ ARG002
26 |         name: str | None = None,
27 |         basename: str | None = None,
   |

backend/app/common/routers.py:49:9: ANN201 Missing return type annotation for public function `register_decorator`
   |
47 |         return decorator
48 |
49 |     def register_decorator(
   |         ^^^^^^^^^^^^^^^^^^ ANN201
50 |         self,
51 |         route: str,
   |
   = help: Add return type annotation

backend/app/config/axes.py:59:69: PLW1508 Invalid type for environment variable default; expected `str` or `None`
   |
57 | AXES_LOGGER = getenv("AXES_LOGGER", default="axes.watch_login")
58 | AXES_LOCKOUT_LOGGER = getenv("AXES_LOCKOUT_LOGGER", default="axes.watch_login")
59 | AXES_ACCESS_FAILURE_LOG = getenv("AXES_ACCESS_FAILURE_LOG", default=True)
   |                                                                     ^^^^ PLW1508
60 |
61 | AXES_BEHIND_REVERSE_PROXY = (
   |

backend/app/config/base.py:5:12: PTH120 `os.path.dirname()` should be replaced by `Path.parent`
  |
3 | import os
4 |
5 | BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
  |            ^^^^^^^^^^^^^^^ PTH120
  |

backend/app/config/base.py:5:28: PTH120 `os.path.dirname()` should be replaced by `Path.parent`
  |
3 | import os
4 |
5 | BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
  |                            ^^^^^^^^^^^^^^^ PTH120
  |

backend/app/config/base.py:5:44: PTH100 `os.path.abspath()` should be replaced by `Path.resolve()`
  |
3 | import os
4 |
5 | BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
  |                                            ^^^^^^^^^^^^^^^ PTH100
  |

backend/app/config/core/admin.py:25:16: RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
   |
23 |     filter_horizontal = ("groups", "user_permissions")
24 |     inlines = (UserProfileInline,)
25 |     ordering = ["user_id"]
   |                ^^^^^^^^^^^ RUF012
26 |     list_display = [
27 |         "email",
   |

backend/app/config/core/admin.py:26:20: RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
   |
24 |       inlines = (UserProfileInline,)
25 |       ordering = ["user_id"]
26 |       list_display = [
   |  ____________________^
27 | |         "email",
28 | |         "username",
29 | |         "get_first_name",
30 | |         "get_last_name",
31 | |         "is_active",
32 | |         "is_staff",
33 | |         "is_superuser",
34 | |         "custom_last_login",
35 | |     ]
   | |_____^ RUF012
36 |       list_filter = ["is_active", "is_staff", "is_superuser"]
37 |       search_fields = ["email", "username", "profile__first_name", "profile__last_name"]
   |

backend/app/config/core/admin.py:36:19: RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
   |
34 |         "custom_last_login",
35 |     ]
36 |     list_filter = ["is_active", "is_staff", "is_superuser"]
   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ RUF012
37 |     search_fields = ["email", "username", "profile__first_name", "profile__last_name"]
38 |     fieldsets = (
   |

backend/app/config/core/admin.py:37:21: RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
   |
35 |     ]
36 |     list_filter = ["is_active", "is_staff", "is_superuser"]
37 |     search_fields = ["email", "username", "profile__first_name", "profile__last_name"]
   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ RUF012
38 |     fieldsets = (
39 |         (None, {"fields": ("email", "username", "password")}),
   |

backend/app/config/core/admin.py:64:23: RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
   |
62 |         ),
63 |     )
64 |     readonly_fields = ["last_login"]
   |                       ^^^^^^^^^^^^^^ RUF012
65 |
66 |     def get_first_name(self, obj):
   |

backend/app/config/core/admin.py:66:9: ANN201 Missing return type annotation for public function `get_first_name`
   |
64 |     readonly_fields = ["last_login"]
65 |
66 |     def get_first_name(self, obj):
   |         ^^^^^^^^^^^^^^ ANN201
67 |         return obj.profile.first_name if hasattr(obj, "profile") else "-"
   |
   = help: Add return type annotation

backend/app/config/core/admin.py:66:30: ANN001 Missing type annotation for function argument `obj`
   |
64 |     readonly_fields = ["last_login"]
65 |
66 |     def get_first_name(self, obj):
   |                              ^^^ ANN001
67 |         return obj.profile.first_name if hasattr(obj, "profile") else "-"
   |

backend/app/config/core/admin.py:71:9: ANN201 Missing return type annotation for public function `get_last_name`
   |
69 |     get_first_name.short_description = "First Name"
70 |
71 |     def get_last_name(self, obj):
   |         ^^^^^^^^^^^^^ ANN201
72 |         return obj.profile.last_name if hasattr(obj, "profile") else "-"
   |
   = help: Add return type annotation

backend/app/config/core/admin.py:71:29: ANN001 Missing type annotation for function argument `obj`
   |
69 |     get_first_name.short_description = "First Name"
70 |
71 |     def get_last_name(self, obj):
   |                             ^^^ ANN001
72 |         return obj.profile.last_name if hasattr(obj, "profile") else "-"
   |

backend/app/config/core/admin.py:76:9: ANN201 Missing return type annotation for public function `custom_last_login`
   |
74 |     get_last_name.short_description = "Last Name"
75 |
76 |     def custom_last_login(self, obj):
   |         ^^^^^^^^^^^^^^^^^ ANN201
77 |         """Custom representation of last_login field to display time in GMT+7."""
78 |         if obj.last_login:
   |
   = help: Add return type annotation

backend/app/config/core/admin.py:76:33: ANN001 Missing type annotation for function argument `obj`
   |
74 |     get_last_name.short_description = "Last Name"
75 |
76 |     def custom_last_login(self, obj):
   |                                 ^^^ ANN001
77 |         """Custom representation of last_login field to display time in GMT+7."""
78 |         if obj.last_login:
   |

backend/app/config/core/admin.py:77:9: D401 First line of docstring should be in imperative mood: "Custom representation of last_login field to display time in GMT+7."
   |
76 |     def custom_last_login(self, obj):
77 |         """Custom representation of last_login field to display time in GMT+7."""
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D401
78 |         if obj.last_login:
79 |             last_login_gmt7 = obj.last_login + timezone.timedelta(hours=7)
   |

backend/app/config/core/admin.py:81:9: RET505 Unnecessary `else` after `return` statement
   |
79 |             last_login_gmt7 = obj.last_login + timezone.timedelta(hours=7)
80 |             return last_login_gmt7.strftime("%Y-%m-%d %H:%M:%S")
81 |         else:
   |         ^^^^ RET505
82 |             return _("Never logged in")
   |
   = help: Remove unnecessary `else`

backend/app/config/core/admin.py:88:20: RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
   |
87 |   class DttotDocAdmin(admin.ModelAdmin):
88 |       list_display = [
   |  ____________________^
89 | |         "document_id",
90 | |         "dttot_id",
91 | |         "dttot_type",
92 | |         "display_username",
93 | |         "formatted_updated_at",
94 | |     ]
   | |_____^ RUF012
95 |       search_fields = [
96 |           "dttot_id",
   |

backend/app/config/core/admin.py:95:21: RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
    |
 93 |           "formatted_updated_at",
 94 |       ]
 95 |       search_fields = [
    |  _____________________^
 96 | |         "dttot_id",
 97 | |         "dttot_type",
 98 | |         "dttot_first_name",
 99 | |         "dttot_last_name",
100 | |         "user__username",
101 | |     ]
    | |_____^ RUF012
102 |       list_filter = ["dttot_type", "updated_at"]
103 |       readonly_fields = ("document_id", "dttot_id")
    |

backend/app/config/core/admin.py:102:19: RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
    |
100 |         "user__username",
101 |     ]
102 |     list_filter = ["dttot_type", "updated_at"]
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ RUF012
103 |     readonly_fields = ("document_id", "dttot_id")
    |

backend/app/config/core/admin.py:105:9: ANN201 Missing return type annotation for public function `display_username`
    |
103 |     readonly_fields = ("document_id", "dttot_id")
104 |
105 |     def display_username(self, obj):
    |         ^^^^^^^^^^^^^^^^ ANN201
106 |         return obj.user.username
    |
    = help: Add return type annotation

backend/app/config/core/admin.py:105:32: ANN001 Missing type annotation for function argument `obj`
    |
103 |     readonly_fields = ("document_id", "dttot_id")
104 |
105 |     def display_username(self, obj):
    |                                ^^^ ANN001
106 |         return obj.user.username
    |

backend/app/config/core/admin.py:110:9: ANN201 Missing return type annotation for public function `formatted_updated_at`
    |
108 |     display_username.short_description = "username"
109 |
110 |     def formatted_updated_at(self, obj):
    |         ^^^^^^^^^^^^^^^^^^^^ ANN201
111 |         local_tz = pytz.timezone("Asia/Jakarta")  # GMT+7 timezone
112 |         local_time = timezone.localtime(obj.updated_at, local_tz)
    |
    = help: Add return type annotation

backend/app/config/core/admin.py:110:36: ANN001 Missing type annotation for function argument `obj`
    |
108 |     display_username.short_description = "username"
109 |
110 |     def formatted_updated_at(self, obj):
    |                                    ^^^ ANN001
111 |         local_tz = pytz.timezone("Asia/Jakarta")  # GMT+7 timezone
112 |         local_time = timezone.localtime(obj.updated_at, local_tz)
    |

backend/app/config/core/admin.py:122:20: RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
    |
121 |   class DocumentAdmin(admin.ModelAdmin):
122 |       list_display = [
    |  ____________________^
123 | |         "document_id",
124 | |         "document_name",
125 | |         "document_type",
126 | |         "created_by_username",
127 | |         "updated_by_username",
128 | |     ]
    | |_____^ RUF012
129 |       search_fields = (
130 |           "document_name",
    |

backend/app/config/core/admin.py:137:9: ANN201 Missing return type annotation for public function `created_by_username`
    |
135 |     readonly_fields = ("document_id",)
136 |
137 |     def created_by_username(self, obj):
    |         ^^^^^^^^^^^^^^^^^^^ ANN201
138 |         return obj.created_by.username
    |
    = help: Add return type annotation

backend/app/config/core/admin.py:137:35: ANN001 Missing type annotation for function argument `obj`
    |
135 |     readonly_fields = ("document_id",)
136 |
137 |     def created_by_username(self, obj):
    |                                   ^^^ ANN001
138 |         return obj.created_by.username
    |

backend/app/config/core/admin.py:142:9: ANN201 Missing return type annotation for public function `updated_by_username`
    |
140 |     created_by_username.short_description = "username"
141 |
142 |     def updated_by_username(self, obj):
    |         ^^^^^^^^^^^^^^^^^^^ ANN201
143 |         return obj.updated_by.username
    |
    = help: Add return type annotation

backend/app/config/core/admin.py:142:35: ANN001 Missing type annotation for function argument `obj`
    |
140 |     created_by_username.short_description = "username"
141 |
142 |     def updated_by_username(self, obj):
    |                                   ^^^ ANN001
143 |         return obj.updated_by.username
    |

backend/app/config/core/management/commands/show_urls.py:10:22: ANN002 Missing type annotation for `*args`
   |
 8 |     help = "Display all registered URLs"
 9 |
10 |     def handle(self, *args, **options) -> None:
   |                      ^^^^^ ANN002
11 |         resolver = get_resolver()
12 |         for pattern in resolver.url_patterns:
   |

backend/app/config/core/management/commands/show_urls.py:10:23: ARG002 Unused method argument: `args`
   |
 8 |     help = "Display all registered URLs"
 9 |
10 |     def handle(self, *args, **options) -> None:
   |                       ^^^^ ARG002
11 |         resolver = get_resolver()
12 |         for pattern in resolver.url_patterns:
   |

backend/app/config/core/management/commands/show_urls.py:10:29: ANN003 Missing type annotation for `**options`
   |
 8 |     help = "Display all registered URLs"
 9 |
10 |     def handle(self, *args, **options) -> None:
   |                             ^^^^^^^^^ ANN003
11 |         resolver = get_resolver()
12 |         for pattern in resolver.url_patterns:
   |

backend/app/config/core/management/commands/show_urls.py:10:31: ARG002 Unused method argument: `options`
   |
 8 |     help = "Display all registered URLs"
 9 |
10 |     def handle(self, *args, **options) -> None:
   |                               ^^^^^^^ ARG002
11 |         resolver = get_resolver()
12 |         for pattern in resolver.url_patterns:
   |

backend/app/config/core/management/commands/show_urls.py:15:29: ANN001 Missing type annotation for function argument `pattern`
   |
13 |             self.print_pattern(pattern)
14 |
15 |     def print_pattern(self, pattern, prefix="") -> None:
   |                             ^^^^^^^ ANN001
16 |         if hasattr(pattern, "url_patterns"):
17 |             for sub_pattern in pattern.url_patterns:
   |

backend/app/config/core/management/commands/show_urls.py:15:38: ANN001 Missing type annotation for function argument `prefix`
   |
13 |             self.print_pattern(pattern)
14 |
15 |     def print_pattern(self, pattern, prefix="") -> None:
   |                                      ^^^^^^ ANN001
16 |         if hasattr(pattern, "url_patterns"):
17 |             for sub_pattern in pattern.url_patterns:
   |

backend/app/config/core/management/commands/wait_for_db.py:19:22: ANN002 Missing type annotation for `*args`
   |
17 |     """Django command to wait for services."""
18 |
19 |     def handle(self, *args, **options) -> None:
   |                      ^^^^^ ANN002
20 |         self.wait_for_service(
21 |             "database",
   |

backend/app/config/core/management/commands/wait_for_db.py:19:23: ARG002 Unused method argument: `args`
   |
17 |     """Django command to wait for services."""
18 |
19 |     def handle(self, *args, **options) -> None:
   |                       ^^^^ ARG002
20 |         self.wait_for_service(
21 |             "database",
   |

backend/app/config/core/management/commands/wait_for_db.py:19:29: ANN003 Missing type annotation for `**options`
   |
17 |     """Django command to wait for services."""
18 |
19 |     def handle(self, *args, **options) -> None:
   |                             ^^^^^^^^^ ANN003
20 |         self.wait_for_service(
21 |             "database",
   |

backend/app/config/core/management/commands/wait_for_db.py:19:31: ARG002 Unused method argument: `options`
   |
17 |     """Django command to wait for services."""
18 |
19 |     def handle(self, *args, **options) -> None:
   |                               ^^^^^^^ ARG002
20 |         self.wait_for_service(
21 |             "database",
   |

backend/app/config/core/management/commands/wait_for_db.py:48:9: PLR0913 Too many arguments in function definition (6 > 5)
   |
46 |         self.stdout.write(self.style.SUCCESS("RabbitMQ available!"))
47 |
48 |     def wait_for_service(
   |         ^^^^^^^^^^^^^^^^ PLR0913
49 |         self,
50 |         service_name,
   |

backend/app/config/core/management/commands/wait_for_db.py:50:9: ANN001 Missing type annotation for function argument `service_name`
   |
48 |     def wait_for_service(
49 |         self,
50 |         service_name,
   |         ^^^^^^^^^^^^ ANN001
51 |         check_function,
52 |         check_kwargs,
   |

backend/app/config/core/management/commands/wait_for_db.py:51:9: ANN001 Missing type annotation for function argument `check_function`
   |
49 |         self,
50 |         service_name,
51 |         check_function,
   |         ^^^^^^^^^^^^^^ ANN001
52 |         check_kwargs,
53 |         wait_time=1,
   |

backend/app/config/core/management/commands/wait_for_db.py:52:9: ANN001 Missing type annotation for function argument `check_kwargs`
   |
50 |         service_name,
51 |         check_function,
52 |         check_kwargs,
   |         ^^^^^^^^^^^^ ANN001
53 |         wait_time=1,
54 |         max_retries=30,
   |

backend/app/config/core/management/commands/wait_for_db.py:53:9: ANN001 Missing type annotation for function argument `wait_time`
   |
51 |         check_function,
52 |         check_kwargs,
53 |         wait_time=1,
   |         ^^^^^^^^^ ANN001
54 |         max_retries=30,
55 |     ) -> None:
   |

backend/app/config/core/management/commands/wait_for_db.py:54:9: ANN001 Missing type annotation for function argument `max_retries`
   |
52 |         check_kwargs,
53 |         wait_time=1,
54 |         max_retries=30,
   |         ^^^^^^^^^^^ ANN001
55 |     ) -> None:
56 |         """Wait for a service to be available."""
   |

backend/app/config/core/management/commands/wait_for_db.py:63:17: TRY300 Consider moving this statement to an `else` block
   |
61 |                 check_function(**check_kwargs)
62 |                 self.stdout.write(self.style.SUCCESS(f"{service_name} available!"))
63 |                 return
   |                 ^^^^^^ TRY300
64 |             except Exception as e:
65 |                 self.stdout.write(
   |

backend/app/config/core/management/commands/wait_for_db.py:64:13: PERF203 `try`-`except` within a loop incurs performance overhead
   |
62 |                   self.stdout.write(self.style.SUCCESS(f"{service_name} available!"))
63 |                   return
64 |               except Exception as e:
   |  _____________^
65 | |                 self.stdout.write(
66 | |                     f"{service_name} unavailable, waiting {wait_time} second(s)...",
67 | |                 )
68 | |                 self.stdout.write(str(e))
69 | |                 time.sleep(wait_time)
70 | |                 retries += 1
   | |____________________________^ PERF203
71 |           msg = f"{service_name} not available after {max_retries} retries"
72 |           raise Exception(msg)
   |

backend/app/config/core/management/commands/wait_for_db.py:64:20: BLE001 Do not catch blind exception: `Exception`
   |
62 |                 self.stdout.write(self.style.SUCCESS(f"{service_name} available!"))
63 |                 return
64 |             except Exception as e:
   |                    ^^^^^^^^^ BLE001
65 |                 self.stdout.write(
66 |                     f"{service_name} unavailable, waiting {wait_time} second(s)...",
   |

backend/app/config/core/management/commands/wait_for_db.py:72:15: TRY002 Create your own exception
   |
70 |                 retries += 1
71 |         msg = f"{service_name} not available after {max_retries} retries"
72 |         raise Exception(msg)
   |               ^^^^^^^^^^^^^^ TRY002
73 |
74 |     def check_db(self) -> None:
   |

backend/app/config/core/models.py:22:9: ANN201 Missing return type annotation for public function `create_user`
   |
20 |     """Manager for user profiles."""
21 |
22 |     def create_user(self, email, username, password=None, **extra_fields):
   |         ^^^^^^^^^^^ ANN201
23 |         """Create and return a new user."""
24 |         if not email:
   |
   = help: Add return type annotation

backend/app/config/core/models.py:22:27: ANN001 Missing type annotation for function argument `email`
   |
20 |     """Manager for user profiles."""
21 |
22 |     def create_user(self, email, username, password=None, **extra_fields):
   |                           ^^^^^ ANN001
23 |         """Create and return a new user."""
24 |         if not email:
   |

backend/app/config/core/models.py:22:34: ANN001 Missing type annotation for function argument `username`
   |
20 |     """Manager for user profiles."""
21 |
22 |     def create_user(self, email, username, password=None, **extra_fields):
   |                                  ^^^^^^^^ ANN001
23 |         """Create and return a new user."""
24 |         if not email:
   |

backend/app/config/core/models.py:22:44: ANN001 Missing type annotation for function argument `password`
   |
20 |     """Manager for user profiles."""
21 |
22 |     def create_user(self, email, username, password=None, **extra_fields):
   |                                            ^^^^^^^^ ANN001
23 |         """Create and return a new user."""
24 |         if not email:
   |

backend/app/config/core/models.py:22:59: ANN003 Missing type annotation for `**extra_fields`
   |
20 |     """Manager for user profiles."""
21 |
22 |     def create_user(self, email, username, password=None, **extra_fields):
   |                                                           ^^^^^^^^^^^^^^ ANN003
23 |         """Create and return a new user."""
24 |         if not email:
   |

backend/app/config/core/models.py:32:9: ANN201 Missing return type annotation for public function `create_superuser`
   |
30 |         return user
31 |
32 |     def create_superuser(self, email, username, password=None, **extra_fields):
   |         ^^^^^^^^^^^^^^^^ ANN201
33 |         """Create and return a new superuser."""
34 |         extra_fields.setdefault("is_staff", True)
   |
   = help: Add return type annotation

backend/app/config/core/models.py:32:32: ANN001 Missing type annotation for function argument `email`
   |
30 |         return user
31 |
32 |     def create_superuser(self, email, username, password=None, **extra_fields):
   |                                ^^^^^ ANN001
33 |         """Create and return a new superuser."""
34 |         extra_fields.setdefault("is_staff", True)
   |

backend/app/config/core/models.py:32:39: ANN001 Missing type annotation for function argument `username`
   |
30 |         return user
31 |
32 |     def create_superuser(self, email, username, password=None, **extra_fields):
   |                                       ^^^^^^^^ ANN001
33 |         """Create and return a new superuser."""
34 |         extra_fields.setdefault("is_staff", True)
   |

backend/app/config/core/models.py:32:49: ANN001 Missing type annotation for function argument `password`
   |
30 |         return user
31 |
32 |     def create_superuser(self, email, username, password=None, **extra_fields):
   |                                                 ^^^^^^^^ ANN001
33 |         """Create and return a new superuser."""
34 |         extra_fields.setdefault("is_staff", True)
   |

backend/app/config/core/models.py:32:64: ANN003 Missing type annotation for `**extra_fields`
   |
30 |         return user
31 |
32 |     def create_superuser(self, email, username, password=None, **extra_fields):
   |                                                                ^^^^^^^^^^^^^^ ANN003
33 |         """Create and return a new superuser."""
34 |         extra_fields.setdefault("is_staff", True)
   |

backend/app/config/core/models.py:44:16: DJ001 Avoid using `null=True` on string-based fields such as `CharField`
   |
42 |     user_id = models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True)
43 |     email = models.EmailField(_("email_address"), unique=True)
44 |     username = models.CharField(_("username"), max_length=150, unique=True, null=True)
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ DJ001
45 |     is_active = models.BooleanField(_("active"), default=True)
46 |     is_staff = models.BooleanField(_("staff status"), default=False)
   |

backend/app/config/core/models.py:52:23: RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
   |
51 |     USERNAME_FIELD = "email"
52 |     REQUIRED_FIELDS = ["username"]
   |                       ^^^^^^^^^^^^ RUF012
53 |
54 |     class Meta:
   |

backend/app/config/core/models.py:72:17: DJ001 Avoid using `null=True` on string-based fields such as `CharField`
   |
70 |     birth_date = models.DateField(null=True, blank=True)
71 |     first_name = models.CharField(_("First Name"), max_length=50, blank=True)
72 |     last_name = models.CharField(_("Last Name"), max_length=50, blank=True, null=True)
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ DJ001
73 |
74 |     def __str__(self) -> str:
   |

backend/app/config/core/models.py:78:5: ANN201 Missing return type annotation for public function `encrypt_filename`
   |
78 | def encrypt_filename(filename):
   |     ^^^^^^^^^^^^^^^^ ANN201
79 |     """Use SHA-256 to hash the filename and preserve the original file extension."""
80 |     sha256_hash = hashlib.sha256()
   |
   = help: Add return type annotation

backend/app/config/core/models.py:78:22: ANN001 Missing type annotation for function argument `filename`
   |
78 | def encrypt_filename(filename):
   |                      ^^^^^^^^ ANN001
79 |     """Use SHA-256 to hash the filename and preserve the original file extension."""
80 |     sha256_hash = hashlib.sha256()
   |

backend/app/config/core/models.py:83:22: PTH122 `os.path.splitext()` should be replaced by `Path.suffix`, `Path.stem`, and `Path.parent`
   |
81 |     sha256_hash.update(filename.encode("utf-8"))
82 |     encrypted_filename = sha256_hash.hexdigest()
83 |     file_extension = os.path.splitext(filename)[1]
   |                      ^^^^^^^^^^^^^^^^ PTH122
84 |     return encrypted_filename + file_extension
   |

backend/app/config/core/models.py:87:27: ANN001 Missing type annotation for function argument `instance`
   |
87 | def save_file_to_instance(instance, uploaded_file) -> None:
   |                           ^^^^^^^^ ANN001
88 |     if uploaded_file:
89 |         filename = uploaded_file.name
   |

backend/app/config/core/models.py:87:37: ANN001 Missing type annotation for function argument `uploaded_file`
   |
87 | def save_file_to_instance(instance, uploaded_file) -> None:
   |                                     ^^^^^^^^^^^^^ ANN001
88 |     if uploaded_file:
89 |         filename = uploaded_file.name
   |

backend/app/config/core/models.py:94:55: PTH119 `os.path.basename()` should be replaced by `Path.name`
   |
92 |         file_content = uploaded_file.read()
93 |
94 |         content_file = ContentFile(file_content, name=os.path.basename(file_path))
   |                                                       ^^^^^^^^^^^^^^^^ PTH119
95 |         instance.document_file.save(content_file.name, content_file, save=False)
   |

backend/app/config/core/models.py:98:5: ANN201 Missing return type annotation for public function `document_directory_path`
    |
 98 | def document_directory_path(instance, filename):
    |     ^^^^^^^^^^^^^^^^^^^^^^^ ANN201
 99 |     date_now = instance.created_date or now()
100 |     app_name = instance._meta.app_label
    |
    = help: Add return type annotation

backend/app/config/core/models.py:98:29: ANN001 Missing type annotation for function argument `instance`
    |
 98 | def document_directory_path(instance, filename):
    |                             ^^^^^^^^ ANN001
 99 |     date_now = instance.created_date or now()
100 |     app_name = instance._meta.app_label
    |

backend/app/config/core/models.py:98:39: ANN001 Missing type annotation for function argument `filename`
    |
 98 | def document_directory_path(instance, filename):
    |                                       ^^^^^^^^ ANN001
 99 |     date_now = instance.created_date or now()
100 |     app_name = instance._meta.app_label
    |

backend/app/config/core/models.py:100:16: SLF001 Private member accessed: `_meta`
    |
 98 | def document_directory_path(instance, filename):
 99 |     date_now = instance.created_date or now()
100 |     app_name = instance._meta.app_label
    |                ^^^^^^^^^^^^^^ SLF001
101 |
102 |     return "{app_name}/{document_type}/{year}/{month}/{day}/{created_by}/{filename}".format(
    |

backend/app/config/core/models.py:115:19: DJ001 Avoid using `null=True` on string-based fields such as `TextField`
    |
113 | class Document(models.Model):
114 |     document_name = models.CharField(max_length=255)
115 |     description = models.TextField(blank=True, null=True)
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ DJ001
116 |     document_file = models.FileField(
117 |         upload_to=document_directory_path,
    |

backend/app/config/core/models.py:123:26: DJ001 Avoid using `null=True` on string-based fields such as `CharField`
    |
121 |     created_date = models.DateTimeField(auto_now_add=True)
122 |     document_id = models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True)
123 |     document_file_type = models.CharField(max_length=50, null=True, blank=True)
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ DJ001
124 |     document_type = models.CharField(max_length=50)
125 |     updated_date = models.DateTimeField(auto_now=True)
    |

backend/app/config/core/models.py:139:20: ANN002 Missing type annotation for `*args`
    |
137 |     )
138 |
139 |     def save(self, *args, **kwargs) -> None:
    |                    ^^^^^ ANN002
140 |         if (
141 |             self.document_file
    |

backend/app/config/core/models.py:139:27: ANN003 Missing type annotation for `**kwargs`
    |
137 |     )
138 |
139 |     def save(self, *args, **kwargs) -> None:
    |                           ^^^^^^^^ ANN003
140 |         if (
141 |             self.document_file
    |

backend/app/config/core/models.py:148:9: ANN201 Missing return type annotation for public function `document_file_required`
    |
146 |         super().save(*args, **kwargs)
147 |
148 |     def document_file_required(self):
    |         ^^^^^^^^^^^^^^^^^^^^^^ ANN201
149 |         return self.document_type in [
150 |             "PDF",
    |
    = help: Add return type annotation

backend/app/config/core/models.py:155:5: DJ012 Order of model's inner classes, methods, and fields does not follow the Django Style Guide: `__str__` method should come before `save` method
    |
153 |           ]
154 |
155 |       def __str__(self) -> str:
    |  _____^
156 | |         return self.document_name
    | |_________________________________^ DJ012
    |

backend/app/config/core/models.py:159:7: N801 Class name `dttotDoc` should use CapWords convention
    |
159 | class dttotDoc(models.Model):
    |       ^^^^^^^^ N801
160 |     user = models.ForeignKey(
161 |         settings.AUTH_USER_MODEL,
    |

backend/app/config/core/models.py:175:24: DJ001 Avoid using `null=True` on string-based fields such as `CharField`
    |
173 |       )
174 |       dttot_id = models.UUIDField(default=uuid.uuid4, primary_key=True, editable=False)
175 |       dttot_first_name = models.CharField(
    |  ________________________^
176 | |         _("DTTOT First Name"),
177 | |         max_length=255,
178 | |         blank=True,
179 | |         null=True,
180 | |     )
    | |_____^ DJ001
181 |       dttot_middle_name = models.CharField(
182 |           _("DTTOT Middle Name"),
    |

backend/app/config/core/models.py:181:25: DJ001 Avoid using `null=True` on string-based fields such as `CharField`
    |
179 |           null=True,
180 |       )
181 |       dttot_middle_name = models.CharField(
    |  _________________________^
182 | |         _("DTTOT Middle Name"),
183 | |         max_length=255,
184 | |         blank=True,
185 | |         null=True,
186 | |     )
    | |_____^ DJ001
187 |       dttot_last_name = models.CharField(
188 |           _("DTTOT Last Name"),
    |

backend/app/config/core/models.py:187:23: DJ001 Avoid using `null=True` on string-based fields such as `CharField`
    |
185 |           null=True,
186 |       )
187 |       dttot_last_name = models.CharField(
    |  _______________________^
188 | |         _("DTTOT Last Name"),
189 | |         max_length=255,
190 | |         blank=True,
191 | |         null=True,
192 | |     )
    | |_____^ DJ001
193 |       dttot_alias_name_1 = models.CharField(
194 |           _("DTTOT Alias Name 1"),
    |

backend/app/config/core/models.py:193:26: DJ001 Avoid using `null=True` on string-based fields such as `CharField`
    |
191 |           null=True,
192 |       )
193 |       dttot_alias_name_1 = models.CharField(
    |  __________________________^
194 | |         _("DTTOT Alias Name 1"),
195 | |         max_length=255,
196 | |         blank=True,
197 | |         null=True,
198 | |     )
    | |_____^ DJ001
199 |       dttot_alias_first_name_1 = models.CharField(
200 |           _("DTTOT Alias First Name 1"),
    |

backend/app/config/core/models.py:199:32: DJ001 Avoid using `null=True` on string-based fields such as `CharField`
    |
197 |           null=True,
198 |       )
199 |       dttot_alias_first_name_1 = models.CharField(
    |  ________________________________^
200 | |         _("DTTOT Alias First Name 1"),
201 | |         max_length=255,
202 | |         blank=True,
203 | |         null=True,
204 | |     )
    | |_____^ DJ001
205 |       dttot_alias_middle_name_1 = models.CharField(
206 |           _("DTTOT Alias Middle Name 1"),
    |

backend/app/config/core/models.py:205:33: DJ001 Avoid using `null=True` on string-based fields such as `CharField`
    |
203 |           null=True,
204 |       )
205 |       dttot_alias_middle_name_1 = models.CharField(
    |  _________________________________^
206 | |         _("DTTOT Alias Middle Name 1"),
207 | |         max_length=255,
208 | |         blank=True,
209 | |         null=True,
210 | |     )
    | |_____^ DJ001
211 |       dttot_alias_last_name_1 = models.CharField(
212 |           _("DTTOT Alias Last Name 1"),
    |

backend/app/config/core/models.py:211:31: DJ001 Avoid using `null=True` on string-based fields such as `CharField`
    |
209 |           null=True,
210 |       )
211 |       dttot_alias_last_name_1 = models.CharField(
    |  _______________________________^
212 | |         _("DTTOT Alias Last Name 1"),
213 | |         max_length=255,
214 | |         blank=True,
215 | |         null=True,
216 | |     )
    | |_____^ DJ001
217 |       dttot_alias_name_2 = models.CharField(
218 |           _("DTTOT Alias Name 2"),
    |

backend/app/config/core/models.py:217:26: DJ001 Avoid using `null=True` on string-based fields such as `CharField`
    |
215 |           null=True,
216 |       )
217 |       dttot_alias_name_2 = models.CharField(
    |  __________________________^
218 | |         _("DTTOT Alias Name 2"),
219 | |         max_length=255,
220 | |         blank=True,
221 | |         null=True,
222 | |     )
    | |_____^ DJ001
223 |       dttot_alias_first_name_2 = models.CharField(
224 |           _("DTTOT Alias First Name 2"),
    |

backend/app/config/core/models.py:223:32: DJ001 Avoid using `null=True` on string-based fields such as `CharField`
    |
221 |           null=True,
222 |       )
223 |       dttot_alias_first_name_2 = models.CharField(
    |  ________________________________^
224 | |         _("DTTOT Alias First Name 2"),
225 | |         max_length=255,
226 | |         blank=True,
227 | |         null=True,
228 | |     )
    | |_____^ DJ001
229 |       dttot_alias_middle_name_2 = models.CharField(
230 |           _("DTTOT Alias Middle Name 2"),
    |

backend/app/config/core/models.py:229:33: DJ001 Avoid using `null=True` on string-based fields such as `CharField`
    |
227 |           null=True,
228 |       )
229 |       dttot_alias_middle_name_2 = models.CharField(
    |  _________________________________^
230 | |         _("DTTOT Alias Middle Name 2"),
231 | |         max_length=255,
232 | |         blank=True,
233 | |         null=True,
234 | |     )
    | |_____^ DJ001
235 |       dttot_alias_last_name_2 = models.CharField(
236 |           _("DTTOT Alias Last Name 2"),
    |

backend/app/config/core/models.py:235:31: DJ001 Avoid using `null=True` on string-based fields such as `CharField`
    |
233 |           null=True,
234 |       )
235 |       dttot_alias_last_name_2 = models.CharField(
    |  _______________________________^
236 | |         _("DTTOT Alias Last Name 2"),
237 | |         max_length=255,
238 | |         blank=True,
239 | |         null=True,
240 | |     )
    | |_____^ DJ001
241 |       dttot_alias_name_3 = models.CharField(
242 |           _("DTTOT Alias Name 3"),
    |

backend/app/config/core/models.py:241:26: DJ001 Avoid using `null=True` on string-based fields such as `CharField`
    |
239 |           null=True,
240 |       )
241 |       dttot_alias_name_3 = models.CharField(
    |  __________________________^
242 | |         _("DTTOT Alias Name 3"),
243 | |         max_length=255,
244 | |         blank=True,
245 | |         null=True,
246 | |     )
    | |_____^ DJ001
247 |       dttot_alias_first_name_3 = models.CharField(
248 |           _("DTTOT Alias First Name 3"),
    |

backend/app/config/core/models.py:247:32: DJ001 Avoid using `null=True` on string-based fields such as `CharField`
    |
245 |           null=True,
246 |       )
247 |       dttot_alias_first_name_3 = models.CharField(
    |  ________________________________^
248 | |         _("DTTOT Alias First Name 3"),
249 | |         max_length=255,
250 | |         blank=True,
251 | |         null=True,
252 | |     )
    | |_____^ DJ001
253 |       dttot_alias_middle_name_3 = models.CharField(
254 |           _("DTTOT Alias Middle Name 3"),
    |

backend/app/config/core/models.py:253:33: DJ001 Avoid using `null=True` on string-based fields such as `CharField`
    |
251 |           null=True,
252 |       )
253 |       dttot_alias_middle_name_3 = models.CharField(
    |  _________________________________^
254 | |         _("DTTOT Alias Middle Name 3"),
255 | |         max_length=255,
256 | |         blank=True,
257 | |         null=True,
258 | |     )
    | |_____^ DJ001
259 |       dttot_alias_last_name_3 = models.CharField(
260 |           _("DTTOT Alias Last Name 3"),
    |

backend/app/config/core/models.py:259:31: DJ001 Avoid using `null=True` on string-based fields such as `CharField`
    |
257 |           null=True,
258 |       )
259 |       dttot_alias_last_name_3 = models.CharField(
    |  _______________________________^
260 | |         _("DTTOT Alias Last Name 3"),
261 | |         max_length=255,
262 | |         blank=True,
263 | |         null=True,
264 | |     )
    | |_____^ DJ001
265 |       dttot_alias_name_4 = models.CharField(
266 |           _("DTTOT Alias Name 4"),
    |

backend/app/config/core/models.py:265:26: DJ001 Avoid using `null=True` on string-based fields such as `CharField`
    |
263 |           null=True,
264 |       )
265 |       dttot_alias_name_4 = models.CharField(
    |  __________________________^
266 | |         _("DTTOT Alias Name 4"),
267 | |         max_length=255,
268 | |         blank=True,
269 | |         null=True,
270 | |     )
    | |_____^ DJ001
271 |       dttot_alias_first_name_4 = models.CharField(
272 |           _("DTTOT Alias First Name 4"),
    |

backend/app/config/core/models.py:271:32: DJ001 Avoid using `null=True` on string-based fields such as `CharField`
    |
269 |           null=True,
270 |       )
271 |       dttot_alias_first_name_4 = models.CharField(
    |  ________________________________^
272 | |         _("DTTOT Alias First Name 4"),
273 | |         max_length=255,
274 | |         blank=True,
275 | |         null=True,
276 | |     )
    | |_____^ DJ001
277 |       dttot_alias_middle_name_4 = models.CharField(
278 |           _("DTTOT Alias Middle Name 4"),
    |

backend/app/config/core/models.py:277:33: DJ001 Avoid using `null=True` on string-based fields such as `CharField`
    |
275 |           null=True,
276 |       )
277 |       dttot_alias_middle_name_4 = models.CharField(
    |  _________________________________^
278 | |         _("DTTOT Alias Middle Name 4"),
279 | |         max_length=255,
280 | |         blank=True,
281 | |         null=True,
282 | |     )
    | |_____^ DJ001
283 |       dttot_alias_last_name_4 = models.CharField(
284 |           _("DTTOT Alias Last Name 4"),
    |

backend/app/config/core/models.py:283:31: DJ001 Avoid using `null=True` on string-based fields such as `CharField`
    |
281 |           null=True,
282 |       )
283 |       dttot_alias_last_name_4 = models.CharField(
    |  _______________________________^
284 | |         _("DTTOT Alias Last Name 4"),
285 | |         max_length=255,
286 | |         blank=True,
287 | |         null=True,
288 | |     )
    | |_____^ DJ001
289 |       dttot_alias_name_5 = models.CharField(
290 |           _("DTTOT Alias Name 5"),
    |

backend/app/config/core/models.py:289:26: DJ001 Avoid using `null=True` on string-based fields such as `CharField`
    |
287 |           null=True,
288 |       )
289 |       dttot_alias_name_5 = models.CharField(
    |  __________________________^
290 | |         _("DTTOT Alias Name 5"),
291 | |         max_length=255,
292 | |         blank=True,
293 | |         null=True,
294 | |     )
    | |_____^ DJ001
295 |       dttot_alias_first_name_5 = models.CharField(
296 |           _("DTTOT Alias First Name 5"),
    |

backend/app/config/core/models.py:295:32: DJ001 Avoid using `null=True` on string-based fields such as `CharField`
    |
293 |           null=True,
294 |       )
295 |       dttot_alias_first_name_5 = models.CharField(
    |  ________________________________^
296 | |         _("DTTOT Alias First Name 5"),
297 | |         max_length=255,
298 | |         blank=True,
299 | |         null=True,
300 | |     )
    | |_____^ DJ001
301 |       dttot_alias_middle_name_5 = models.CharField(
302 |           _("DTTOT Alias Middle Name 5"),
    |

backend/app/config/core/models.py:301:33: DJ001 Avoid using `null=True` on string-based fields such as `CharField`
    |
299 |           null=True,
300 |       )
301 |       dttot_alias_middle_name_5 = models.CharField(
    |  _________________________________^
302 | |         _("DTTOT Alias Middle Name 5"),
303 | |         max_length=255,
304 | |         blank=True,
305 | |         null=True,
306 | |     )
    | |_____^ DJ001
307 |       dttot_alias_last_name_5 = models.CharField(
308 |           _("DTTOT Alias Last Name 5"),
    |

backend/app/config/core/models.py:307:31: DJ001 Avoid using `null=True` on string-based fields such as `CharField`
    |
305 |           null=True,
306 |       )
307 |       dttot_alias_last_name_5 = models.CharField(
    |  _______________________________^
308 | |         _("DTTOT Alias Last Name 5"),
309 | |         max_length=255,
310 | |         blank=True,
311 | |         null=True,
312 | |     )
    | |_____^ DJ001
313 |       dttot_type = models.CharField(
314 |           _("DTTOT Type"),
    |

backend/app/config/core/models.py:313:18: DJ001 Avoid using `null=True` on string-based fields such as `CharField`
    |
311 |           null=True,
312 |       )
313 |       dttot_type = models.CharField(
    |  __________________^
314 | |         _("DTTOT Type"),
315 | |         max_length=255,
316 | |         blank=True,
317 | |         null=True,
318 | |     )
    | |_____^ DJ001
319 |       dttot_kode_densus = models.CharField(
320 |           _("DTTOT Kode Densus"),
    |

backend/app/config/core/models.py:319:25: DJ001 Avoid using `null=True` on string-based fields such as `CharField`
    |
317 |           null=True,
318 |       )
319 |       dttot_kode_densus = models.CharField(
    |  _________________________^
320 | |         _("DTTOT Kode Densus"),
321 | |         max_length=255,
322 | |         blank=True,
323 | |         null=True,
324 | |     )
    | |_____^ DJ001
325 |       dttot_birth_place = models.CharField(
326 |           _("DTTOT Birth Place"),
    |

backend/app/config/core/models.py:325:25: DJ001 Avoid using `null=True` on string-based fields such as `CharField`
    |
323 |           null=True,
324 |       )
325 |       dttot_birth_place = models.CharField(
    |  _________________________^
326 | |         _("DTTOT Birth Place"),
327 | |         max_length=255,
328 | |         blank=True,
329 | |         null=True,
330 | |     )
    | |_____^ DJ001
331 |       dttot_birth_date_1 = models.CharField(
332 |           _("DTTOT Birth Date 1"),
    |

backend/app/config/core/models.py:331:26: DJ001 Avoid using `null=True` on string-based fields such as `CharField`
    |
329 |           null=True,
330 |       )
331 |       dttot_birth_date_1 = models.CharField(
    |  __________________________^
332 | |         _("DTTOT Birth Date 1"),
333 | |         max_length=255,
334 | |         blank=True,
335 | |         null=True,
336 | |     )
    | |_____^ DJ001
337 |       dttot_birth_date_2 = models.CharField(
338 |           _("DTTOT Birth Date 2"),
    |

backend/app/config/core/models.py:337:26: DJ001 Avoid using `null=True` on string-based fields such as `CharField`
    |
335 |           null=True,
336 |       )
337 |       dttot_birth_date_2 = models.CharField(
    |  __________________________^
338 | |         _("DTTOT Birth Date 2"),
339 | |         max_length=255,
340 | |         blank=True,
341 | |         null=True,
342 | |     )
    | |_____^ DJ001
343 |       dttot_birth_date_3 = models.CharField(
344 |           _("DTTOT Birth Date 3"),
    |

backend/app/config/core/models.py:343:26: DJ001 Avoid using `null=True` on string-based fields such as `CharField`
    |
341 |           null=True,
342 |       )
343 |       dttot_birth_date_3 = models.CharField(
    |  __________________________^
344 | |         _("DTTOT Birth Date 3"),
345 | |         max_length=255,
346 | |         blank=True,
347 | |         null=True,
348 | |     )
    | |_____^ DJ001
349 |       dttot_nationality_1 = models.CharField(
350 |           _("DTTOT Nationality 1"),
    |

backend/app/config/core/models.py:349:27: DJ001 Avoid using `null=True` on string-based fields such as `CharField`
    |
347 |           null=True,
348 |       )
349 |       dttot_nationality_1 = models.CharField(
    |  ___________________________^
350 | |         _("DTTOT Nationality 1"),
351 | |         max_length=255,
352 | |         blank=True,
353 | |         null=True,
354 | |     )
    | |_____^ DJ001
355 |       dttot_nationality_2 = models.CharField(
356 |           _("DTTOT Nationality 2"),
    |

backend/app/config/core/models.py:355:27: DJ001 Avoid using `null=True` on string-based fields such as `CharField`
    |
353 |           null=True,
354 |       )
355 |       dttot_nationality_2 = models.CharField(
    |  ___________________________^
356 | |         _("DTTOT Nationality 2"),
357 | |         max_length=255,
358 | |         blank=True,
359 | |         null=True,
360 | |     )
    | |_____^ DJ001
361 |       dttot_domicile_address = models.TextField(
362 |           _("DTTOT Domicile Address"),
    |

backend/app/config/core/models.py:361:30: DJ001 Avoid using `null=True` on string-based fields such as `TextField`
    |
359 |           null=True,
360 |       )
361 |       dttot_domicile_address = models.TextField(
    |  ______________________________^
362 | |         _("DTTOT Domicile Address"),
363 | |         blank=True,
364 | |         null=True,
365 | |     )
    | |_____^ DJ001
366 |       dttot_description_1 = models.TextField(
367 |           _("DTTOT Description 1"),
    |

backend/app/config/core/models.py:366:27: DJ001 Avoid using `null=True` on string-based fields such as `TextField`
    |
364 |           null=True,
365 |       )
366 |       dttot_description_1 = models.TextField(
    |  ___________________________^
367 | |         _("DTTOT Description 1"),
368 | |         blank=True,
369 | |         null=True,
370 | |     )
    | |_____^ DJ001
371 |       dttot_description_2 = models.TextField(
372 |           _("DTTOT Description 2"),
    |

backend/app/config/core/models.py:371:27: DJ001 Avoid using `null=True` on string-based fields such as `TextField`
    |
369 |           null=True,
370 |       )
371 |       dttot_description_2 = models.TextField(
    |  ___________________________^
372 | |         _("DTTOT Description 2"),
373 | |         blank=True,
374 | |         null=True,
375 | |     )
    | |_____^ DJ001
376 |       dttot_description_3 = models.TextField(
377 |           _("DTTOT Description 3"),
    |

backend/app/config/core/models.py:376:27: DJ001 Avoid using `null=True` on string-based fields such as `TextField`
    |
374 |           null=True,
375 |       )
376 |       dttot_description_3 = models.TextField(
    |  ___________________________^
377 | |         _("DTTOT Description 3"),
378 | |         blank=True,
379 | |         null=True,
380 | |     )
    | |_____^ DJ001
381 |       dttot_description_4 = models.TextField(
382 |           _("DTTOT Description 4"),
    |

backend/app/config/core/models.py:381:27: DJ001 Avoid using `null=True` on string-based fields such as `TextField`
    |
379 |           null=True,
380 |       )
381 |       dttot_description_4 = models.TextField(
    |  ___________________________^
382 | |         _("DTTOT Description 4"),
383 | |         blank=True,
384 | |         null=True,
385 | |     )
    | |_____^ DJ001
386 |       dttot_description_5 = models.TextField(
387 |           _("DTTOT Description 5"),
    |

backend/app/config/core/models.py:386:27: DJ001 Avoid using `null=True` on string-based fields such as `TextField`
    |
384 |           null=True,
385 |       )
386 |       dttot_description_5 = models.TextField(
    |  ___________________________^
387 | |         _("DTTOT Description 5"),
388 | |         blank=True,
389 | |         null=True,
390 | |     )
    | |_____^ DJ001
391 |       dttot_nik_ktp = models.CharField(
392 |           _("DTTOT NIK KTP"),
    |

backend/app/config/core/models.py:391:21: DJ001 Avoid using `null=True` on string-based fields such as `CharField`
    |
389 |           null=True,
390 |       )
391 |       dttot_nik_ktp = models.CharField(
    |  _____________________^
392 | |         _("DTTOT NIK KTP"),
393 | |         max_length=255,
394 | |         blank=True,
395 | |         null=True,
396 | |     )
    | |_____^ DJ001
397 |       dttot_passport_number = models.CharField(
398 |           _("DTTOT Passport Number"),
    |

backend/app/config/core/models.py:397:29: DJ001 Avoid using `null=True` on string-based fields such as `CharField`
    |
395 |           null=True,
396 |       )
397 |       dttot_passport_number = models.CharField(
    |  _____________________________^
398 | |         _("DTTOT Passport Number"),
399 | |         max_length=255,
400 | |         blank=True,
401 | |         null=True,
402 | |     )
    | |_____^ DJ001
403 |
404 |       def __str__(self) -> str:
    |

backend/app/config/core/models.py:408:7: N801 Class name `dsb_user_personal` should use CapWords convention
    |
408 | class dsb_user_personal(models.Model):
    |       ^^^^^^^^^^^^^^^^^ N801
409 |     dsb_user_personal_id = models.UUIDField(
410 |         default=uuid.uuid4,
    |

backend/app/config/core/models.py:445:23: DJ001 Avoid using `null=True` on string-based fields such as `CharField`
    |
443 |           null=True,
444 |       )
445 |       coredsb_user_id = models.CharField(
    |  _______________________^
446 | |         _("ID of User From Danasaham Core"),
447 | |         max_length=36,
448 | |         blank=True,
449 | |         null=True,
450 | |     )
    | |_____^ DJ001
451 |       user_upgrade_to_personal_date = models.DateTimeField(
452 |           _("Date when User Upgrade to Personal (from Danasaham Core)"),
    |

backend/app/config/core/models.py:456:17: DJ001 Avoid using `null=True` on string-based fields such as `CharField`
    |
454 |           null=True,
455 |       )
456 |       user_name = models.CharField(
    |  _________________^
457 | |         _("Name that being registered on initial (from Danasaham Core)"),
458 | |         max_length=255,
459 | |         blank=True,
460 | |         null=True,
461 | |     )
    | |_____^ DJ001
462 |       users_email_registered = models.EmailField(
463 |           _("Email being Registered Initially (from Danasaham Core)"),
    |

backend/app/config/core/models.py:462:30: DJ001 Avoid using `null=True` on string-based fields such as `EmailField`
    |
460 |           null=True,
461 |       )
462 |       users_email_registered = models.EmailField(
    |  ______________________________^
463 | |         _("Email being Registered Initially (from Danasaham Core)"),
464 | |         blank=True,
465 | |         null=True,
466 | |     )
    | |_____^ DJ001
467 |       users_last_modified_date = models.DateTimeField(
468 |           _("User Entry Last Modified Date (from Danasaham Core)"),
    |

backend/app/config/core/models.py:472:21: DJ001 Avoid using `null=True` on string-based fields such as `CharField`
    |
470 |           null=True,
471 |       )
472 |       personal_name = models.CharField(
    |  _____________________^
473 | |         _("Name of User from Danasaham Core"),
474 | |         max_length=255,
475 | |         blank=True,
476 | |         null=True,
477 | |     )
    | |_____^ DJ001
478 |       personal_phone_number = models.CharField(
479 |           _("Mobile Number of Personal from Danasaham Core"),
    |

backend/app/config/core/models.py:478:29: DJ001 Avoid using `null=True` on string-based fields such as `CharField`
    |
476 |           null=True,
477 |       )
478 |       personal_phone_number = models.CharField(
    |  _____________________________^
479 | |         _("Mobile Number of Personal from Danasaham Core"),
480 | |         max_length=20,
481 | |         blank=True,
482 | |         null=True,
483 | |     )
    | |_____^ DJ001
484 |       personal_nik = models.CharField(
485 |           _("NIK of Personal (from Danasaham Core)"),
    |

backend/app/config/core/models.py:484:20: DJ001 Avoid using `null=True` on string-based fields such as `CharField`
    |
482 |           null=True,
483 |       )
484 |       personal_nik = models.CharField(
    |  ____________________^
485 | |         _("NIK of Personal (from Danasaham Core)"),
486 | |         max_length=36,
487 | |         blank=True,
488 | |         null=True,
489 | |     )
    | |_____^ DJ001
490 |       personal_spouse = models.CharField(
491 |           _("Personal Spouse (from Danasaham Core)"),
    |

backend/app/config/core/models.py:490:23: DJ001 Avoid using `null=True` on string-based fields such as `CharField`
    |
488 |           null=True,
489 |       )
490 |       personal_spouse = models.CharField(
    |  _______________________^
491 | |         _("Personal Spouse (from Danasaham Core)"),
492 | |         max_length=255,
493 | |         blank=True,
494 | |         null=True,
495 | |     )
    | |_____^ DJ001
496 |       personal_mother_name = models.CharField(
497 |           _("Personal Mother Name (from Danasaham Core)"),
    |

backend/app/config/core/models.py:496:28: DJ001 Avoid using `null=True` on string-based fields such as `CharField`
    |
494 |           null=True,
495 |       )
496 |       personal_mother_name = models.CharField(
    |  ____________________________^
497 | |         _("Personal Mother Name (from Danasaham Core)"),
498 | |         max_length=255,
499 | |         blank=True,
500 | |         null=True,
501 | |     )
    | |_____^ DJ001
502 |       personal_domicile_address = models.TextField(
503 |           _("Personal Domicile Address (from Danasaham Core)"),
    |

backend/app/config/core/models.py:502:33: DJ001 Avoid using `null=True` on string-based fields such as `TextField`
    |
500 |           null=True,
501 |       )
502 |       personal_domicile_address = models.TextField(
    |  _________________________________^
503 | |         _("Personal Domicile Address (from Danasaham Core)"),
504 | |         blank=True,
505 | |         null=True,
506 | |     )
    | |_____^ DJ001
507 |       personal_domicile_address_postalcode = models.CharField(
508 |           _("Personal Postal Code of Domicile Address (from Danasaham Core)"),
    |

backend/app/config/core/models.py:507:44: DJ001 Avoid using `null=True` on string-based fields such as `CharField`
    |
505 |           null=True,
506 |       )
507 |       personal_domicile_address_postalcode = models.CharField(
    |  ____________________________________________^
508 | |         _("Personal Postal Code of Domicile Address (from Danasaham Core)"),
509 | |         max_length=10,
510 | |         blank=True,
511 | |         null=True,
512 | |     )
    | |_____^ DJ001
513 |       personal_birth_date = models.DateField(
514 |           _("Personal Birth Date (from Danasaham Core)"),
    |

backend/app/config/core/models.py:518:33: DJ001 Avoid using `null=True` on string-based fields such as `CharField`
    |
516 |           null=True,
517 |       )
518 |       personal_investment_goals = models.CharField(
    |  _________________________________^
519 | |         _("Personal Investment Goals (from Danasaham Core)"),
520 | |         max_length=255,
521 | |         blank=True,
522 | |         null=True,
523 | |     )
    | |_____^ DJ001
524 |       personal_marital_status = models.CharField(
525 |           _("Personal Marital Status (from Danasaham Core)"),
    |

backend/app/config/core/models.py:524:31: DJ001 Avoid using `null=True` on string-based fields such as `CharField`
    |
522 |           null=True,
523 |       )
524 |       personal_marital_status = models.CharField(
    |  _______________________________^
525 | |         _("Personal Marital Status (from Danasaham Core)"),
526 | |         max_length=50,
527 | |         blank=True,
528 | |         null=True,
529 | |     )
    | |_____^ DJ001
530 |       personal_birth_place = models.CharField(
531 |           _("Personal Birth Place (from Danasaham Core)"),
    |

backend/app/config/core/models.py:530:28: DJ001 Avoid using `null=True` on string-based fields such as `CharField`
    |
528 |           null=True,
529 |       )
530 |       personal_birth_place = models.CharField(
    |  ____________________________^
531 | |         _("Personal Birth Place (from Danasaham Core)"),
532 | |         max_length=255,
533 | |         blank=True,
534 | |         null=True,
535 | |     )
    | |_____^ DJ001
536 |       personal_nationality = models.CharField(
537 |           _("Personal Nationality (from Danasaham Core)"),
    |

backend/app/config/core/models.py:536:28: DJ001 Avoid using `null=True` on string-based fields such as `CharField`
    |
534 |           null=True,
535 |       )
536 |       personal_nationality = models.CharField(
    |  ____________________________^
537 | |         _("Personal Nationality (from Danasaham Core)"),
538 | |         max_length=50,
539 | |         blank=True,
540 | |         null=True,
541 | |     )
    | |_____^ DJ001
542 |       personal_source_of_fund = models.CharField(
543 |           _("Personal Source of Fund (from Danasaham Core)"),
    |

backend/app/config/core/models.py:542:31: DJ001 Avoid using `null=True` on string-based fields such as `CharField`
    |
540 |           null=True,
541 |       )
542 |       personal_source_of_fund = models.CharField(
    |  _______________________________^
543 | |         _("Personal Source of Fund (from Danasaham Core)"),
544 | |         max_length=255,
545 | |         blank=True,
546 | |         null=True,
547 | |     )
    | |_____^ DJ001
548 |       personal_legal_last_modified_date = models.DateTimeField(
549 |           _("Personal Legal Entry Last Modified Date (from Danasaham Core)"),
    |

backend/app/config/core/models.py:558:7: N801 Class name `dsb_user_publisher` should use CapWords convention
    |
558 | class dsb_user_publisher(models.Model):
    |       ^^^^^^^^^^^^^^^^^^ N801
559 |     dsb_user_publisher_id = models.UUIDField(
560 |         default=uuid.uuid4,
    |

backend/app/config/core/models.py:597:17: DJ001 Avoid using `null=True` on string-based fields such as `CharField`
    |
595 |           null=True,
596 |       )
597 |       user_name = models.CharField(
    |  _________________^
598 | |         _("Name of User when Initiating Registration (from Danasaham Core)"),
599 | |         max_length=255,
600 | |         blank=True,
601 | |         null=True,
602 | |     )
    | |_____^ DJ001
603 |       registered_user_email = models.EmailField(
604 |           _("Email when Initiating Registration (from Danasaham Core)"),
    |

backend/app/config/core/models.py:603:29: DJ001 Avoid using `null=True` on string-based fields such as `EmailField`
    |
601 |           null=True,
602 |       )
603 |       registered_user_email = models.EmailField(
    |  _____________________________^
604 | |         _("Email when Initiating Registration (from Danasaham Core)"),
605 | |         blank=True,
606 | |         null=True,
607 | |     )
    | |_____^ DJ001
608 |       users_phone_number = models.CharField(
609 |           _("Phone Number when Initiating Registration (from Danasaham Core)"),
    |

backend/app/config/core/models.py:608:26: DJ001 Avoid using `null=True` on string-based fields such as `CharField`
    |
606 |           null=True,
607 |       )
608 |       users_phone_number = models.CharField(
    |  __________________________^
609 | |         _("Phone Number when Initiating Registration (from Danasaham Core)"),
610 | |         max_length=20,
611 | |         blank=True,
612 | |         null=True,
613 | |     )
    | |_____^ DJ001
614 |       has_email_confirmed = models.BooleanField(
615 |           _("Has Email Confirmed (from Danasaham Core)"),
    |

backend/app/config/core/models.py:632:33: DJ001 Avoid using `null=True` on string-based fields such as `CharField`
    |
630 |           null=True,
631 |       )
632 |       publisher_registered_name = models.CharField(
    |  _________________________________^
633 | |         _("Publisher Registered Name (from Danasaham Core)"),
634 | |         max_length=255,
635 | |         blank=True,
636 | |         null=True,
637 | |     )
    | |_____^ DJ001
638 |       publisher_corporate_type = models.CharField(
639 |           _("Publisher Corporate Type (from Danasaham Core)"),
    |

backend/app/config/core/models.py:638:32: DJ001 Avoid using `null=True` on string-based fields such as `CharField`
    |
636 |           null=True,
637 |       )
638 |       publisher_corporate_type = models.CharField(
    |  ________________________________^
639 | |         _("Publisher Corporate Type (from Danasaham Core)"),
640 | |         max_length=255,
641 | |         blank=True,
642 | |         null=True,
643 | |     )
    | |_____^ DJ001
644 |       publisher_phone_number = models.CharField(
645 |           _("Publisher Phone Number (from Danasaham Core)"),
    |

backend/app/config/core/models.py:644:30: DJ001 Avoid using `null=True` on string-based fields such as `CharField`
    |
642 |           null=True,
643 |       )
644 |       publisher_phone_number = models.CharField(
    |  ______________________________^
645 | |         _("Publisher Phone Number (from Danasaham Core)"),
646 | |         max_length=20,
647 | |         blank=True,
648 | |         null=True,
649 | |     )
    | |_____^ DJ001
650 |       publisher_business_field = models.CharField(
651 |           _("Publisher Business Field (from Danasaham Core)"),
    |

backend/app/config/core/models.py:650:32: DJ001 Avoid using `null=True` on string-based fields such as `CharField`
    |
648 |           null=True,
649 |       )
650 |       publisher_business_field = models.CharField(
    |  ________________________________^
651 | |         _("Publisher Business Field (from Danasaham Core)"),
652 | |         max_length=255,
653 | |         blank=True,
654 | |         null=True,
655 | |     )
    | |_____^ DJ001
656 |       publisher_main_business = models.CharField(
657 |           _("Publisher Main Business (from Danasaham Core)"),
    |

backend/app/config/core/models.py:656:31: DJ001 Avoid using `null=True` on string-based fields such as `CharField`
    |
654 |           null=True,
655 |       )
656 |       publisher_main_business = models.CharField(
    |  _______________________________^
657 | |         _("Publisher Main Business (from Danasaham Core)"),
658 | |         max_length=255,
659 | |         blank=True,
660 | |         null=True,
661 | |     )
    | |_____^ DJ001
662 |       domicile_address_publisher_1 = models.TextField(
663 |           _("Domicile Address Publisher Line 1 (from Danasaham Core)"),
    |

backend/app/config/core/models.py:662:36: DJ001 Avoid using `null=True` on string-based fields such as `TextField`
    |
660 |           null=True,
661 |       )
662 |       domicile_address_publisher_1 = models.TextField(
    |  ____________________________________^
663 | |         _("Domicile Address Publisher Line 1 (from Danasaham Core)"),
664 | |         blank=True,
665 | |         null=True,
666 | |     )
    | |_____^ DJ001
667 |       domicile_address_publisher_2 = models.TextField(
668 |           _("Domicile Address Publisher Line 2 (from Danasaham Core)"),
    |

backend/app/config/core/models.py:667:36: DJ001 Avoid using `null=True` on string-based fields such as `TextField`
    |
665 |           null=True,
666 |       )
667 |       domicile_address_publisher_2 = models.TextField(
    |  ____________________________________^
668 | |         _("Domicile Address Publisher Line 2 (from Danasaham Core)"),
669 | |         blank=True,
670 | |         null=True,
671 | |     )
    | |_____^ DJ001
672 |       domicile_address_publisher_3_city = models.CharField(
673 |           _("Domicile Address Publisher City (from Danasaham Core)"),
    |

backend/app/config/core/models.py:672:41: DJ001 Avoid using `null=True` on string-based fields such as `CharField`
    |
670 |           null=True,
671 |       )
672 |       domicile_address_publisher_3_city = models.CharField(
    |  _________________________________________^
673 | |         _("Domicile Address Publisher City (from Danasaham Core)"),
674 | |         max_length=255,
675 | |         blank=True,
676 | |         null=True,
677 | |     )
    | |_____^ DJ001
678 |       publisher_last_modified_date = models.DateTimeField(
679 |           _("Publisher Entry Last Modified Date (from Danasaham Core)"),
    |

backend/app/config/core/models.py:685:19: DJ001 Avoid using `null=True` on string-based fields such as `CharField`
    |
683 |           null=True,
684 |       )
685 |       pengurus_id = models.CharField(
    |  ___________________^
686 | |         _("Pengurus ID (from Danasaham Core)"),
687 | |         max_length=36,
688 | |         blank=True,
689 | |         null=True,
690 | |     )
    | |_____^ DJ001
691 |       pengurus_name = models.CharField(
692 |           _("Pengurus Name (from Danasaham Core)"),
    |

backend/app/config/core/models.py:691:21: DJ001 Avoid using `null=True` on string-based fields such as `CharField`
    |
689 |           null=True,
690 |       )
691 |       pengurus_name = models.CharField(
    |  _____________________^
692 | |         _("Pengurus Name (from Danasaham Core)"),
693 | |         max_length=255,
694 | |         blank=True,
695 | |         null=True,
696 | |     )
    | |_____^ DJ001
697 |       pengurus_id_number = models.CharField(
698 |           _("Pengurus ID Number (from Danasaham Core)"),
    |

backend/app/config/core/models.py:697:26: DJ001 Avoid using `null=True` on string-based fields such as `CharField`
    |
695 |           null=True,
696 |       )
697 |       pengurus_id_number = models.CharField(
    |  __________________________^
698 | |         _("Pengurus ID Number (from Danasaham Core)"),
699 | |         max_length=50,
700 | |         blank=True,
701 | |         null=True,
702 | |     )
    | |_____^ DJ001
703 |       pengurus_phone_number = models.CharField(
704 |           _("Pengurus Phone Number (from Danasaham Core)"),
    |

backend/app/config/core/models.py:703:29: DJ001 Avoid using `null=True` on string-based fields such as `CharField`
    |
701 |           null=True,
702 |       )
703 |       pengurus_phone_number = models.CharField(
    |  _____________________________^
704 | |         _("Pengurus Phone Number (from Danasaham Core)"),
705 | |         max_length=20,
706 | |         blank=True,
707 | |         null=True,
708 | |     )
    | |_____^ DJ001
709 |       role_as = models.CharField(
710 |           _("Role as (from Danasaham Core)"),
    |

backend/app/config/core/models.py:709:15: DJ001 Avoid using `null=True` on string-based fields such as `CharField`
    |
707 |           null=True,
708 |       )
709 |       role_as = models.CharField(
    |  _______________^
710 | |         _("Role as (from Danasaham Core)"),
711 | |         max_length=255,
712 | |         blank=True,
713 | |         null=True,
714 | |     )
    | |_____^ DJ001
715 |       jabatan_pengurus = models.CharField(
716 |           _("Jabatan Pengurus (from Danasaham Core)"),
    |

backend/app/config/core/models.py:715:24: DJ001 Avoid using `null=True` on string-based fields such as `CharField`
    |
713 |           null=True,
714 |       )
715 |       jabatan_pengurus = models.CharField(
    |  ________________________^
716 | |         _("Jabatan Pengurus (from Danasaham Core)"),
717 | |         max_length=255,
718 | |         blank=True,
719 | |         null=True,
720 | |     )
    | |_____^ DJ001
721 |       address_pengurus = models.TextField(
722 |           _("Address Pengurus (from Danasaham Core)"),
    |

backend/app/config/core/models.py:721:24: DJ001 Avoid using `null=True` on string-based fields such as `TextField`
    |
719 |           null=True,
720 |       )
721 |       address_pengurus = models.TextField(
    |  ________________________^
722 | |         _("Address Pengurus (from Danasaham Core)"),
723 | |         blank=True,
724 | |         null=True,
725 | |     )
    | |_____^ DJ001
726 |       tgl_lahir_pengurus = models.DateField(
727 |           _("Tanggal Lahir Pengurus (from Danasaham Core)"),
    |

backend/app/config/core/models.py:731:29: DJ001 Avoid using `null=True` on string-based fields such as `CharField`
    |
729 |           null=True,
730 |       )
731 |       tempat_lahir_pengurus = models.CharField(
    |  _____________________________^
732 | |         _("Tempat Lahir Pengurus (from Danasaham Core)"),
733 | |         max_length=255,
734 | |         blank=True,
735 | |         null=True,
736 | |     )
    | |_____^ DJ001
737 |       pengurus_publisher_last_modified_date = models.DateTimeField(
738 |           _("Pengurus Publisher Entry Last Modified Date (from Danasaham Core)"),
    |

backend/app/config/core/models.py:749:7: N801 Class name `dsb_user_corporate` should use CapWords convention
    |
749 | class dsb_user_corporate(models.Model):
    |       ^^^^^^^^^^^^^^^^^^ N801
750 |     dsb_user_corporate_id = models.UUIDField(
751 |         default=uuid.uuid4,
    |

backend/app/config/core/models.py:786:17: DJ001 Avoid using `null=True` on string-based fields such as `CharField`
    |
784 |           null=True,
785 |       )
786 |       user_name = models.CharField(
    |  _________________^
787 | |         _("Name of User when Initiating Registration (from Danasaham Core)"),
788 | |         max_length=255,
789 | |         blank=True,
790 | |         null=True,
791 | |     )
    | |_____^ DJ001
792 |       registered_user_email = models.EmailField(
793 |           _("Email when Initiating Registration (from Danasaham Core)"),
    |

backend/app/config/core/models.py:792:29: DJ001 Avoid using `null=True` on string-based fields such as `EmailField`
    |
790 |           null=True,
791 |       )
792 |       registered_user_email = models.EmailField(
    |  _____________________________^
793 | |         _("Email when Initiating Registration (from Danasaham Core)"),
794 | |         blank=True,
795 | |         null=True,
796 | |     )
    | |_____^ DJ001
797 |       users_phone_number = models.CharField(
798 |           _("Phone Number when Initiating Registration (from Danasaham Core)"),
    |

backend/app/config/core/models.py:797:26: DJ001 Avoid using `null=True` on string-based fields such as `CharField`
    |
795 |           null=True,
796 |       )
797 |       users_phone_number = models.CharField(
    |  __________________________^
798 | |         _("Phone Number when Initiating Registration (from Danasaham Core)"),
799 | |         max_length=20,
800 | |         blank=True,
801 | |         null=True,
802 | |     )
    | |_____^ DJ001
803 |       users_last_modified_date = models.DateTimeField(
804 |           _("User Entry Last Modified Date (from Danasaham Core)"),
    |

backend/app/config/core/models.py:808:29: DJ001 Avoid using `null=True` on string-based fields such as `CharField`
    |
806 |           null=True,
807 |       )
808 |       corporate_pengurus_id = models.CharField(
    |  _____________________________^
809 | |         _("ID Pengurus of Corporate Investor (from Danasaham Core)"),
810 | |         max_length=36,
811 | |         blank=True,
812 | |         null=True,
813 | |     )
    | |_____^ DJ001
814 |       pengurus_corporate_name = models.CharField(
815 |           _("Name of Pengurus from Corporate (from Danasaham Core)"),
    |

backend/app/config/core/models.py:814:31: DJ001 Avoid using `null=True` on string-based fields such as `CharField`
    |
812 |           null=True,
813 |       )
814 |       pengurus_corporate_name = models.CharField(
    |  _______________________________^
815 | |         _("Name of Pengurus from Corporate (from Danasaham Core)"),
816 | |         max_length=255,
817 | |         blank=True,
818 | |         null=True,
819 | |     )
    | |_____^ DJ001
820 |       pengurus_corporate_id_number = models.CharField(
821 |           _("ID Number of Pengurus from Corporate (from Danasaham Core)"),
    |

backend/app/config/core/models.py:820:36: DJ001 Avoid using `null=True` on string-based fields such as `CharField`
    |
818 |           null=True,
819 |       )
820 |       pengurus_corporate_id_number = models.CharField(
    |  ____________________________________^
821 | |         _("ID Number of Pengurus from Corporate (from Danasaham Core)"),
822 | |         max_length=50,
823 | |         blank=True,
824 | |         null=True,
825 | |     )
    | |_____^ DJ001
826 |       pengurus_corporate_phone_number = models.CharField(
827 |           _("Pengurus Phone Number from Corporate (from Danasaham Core)"),
    |

backend/app/config/core/models.py:826:39: DJ001 Avoid using `null=True` on string-based fields such as `CharField`
    |
824 |           null=True,
825 |       )
826 |       pengurus_corporate_phone_number = models.CharField(
    |  _______________________________________^
827 | |         _("Pengurus Phone Number from Corporate (from Danasaham Core)"),
828 | |         max_length=20,
829 | |         blank=True,
830 | |         null=True,
831 | |     )
    | |_____^ DJ001
832 |       pengurus_corporate_place_of_birth = models.CharField(
833 |           _("Place of Birth of Pengurus (from Danasaham Core)"),
    |

backend/app/config/core/models.py:832:41: DJ001 Avoid using `null=True` on string-based fields such as `CharField`
    |
830 |           null=True,
831 |       )
832 |       pengurus_corporate_place_of_birth = models.CharField(
    |  _________________________________________^
833 | |         _("Place of Birth of Pengurus (from Danasaham Core)"),
834 | |         max_length=255,
835 | |         blank=True,
836 | |         null=True,
837 | |     )
    | |_____^ DJ001
838 |       pengurus_corporate_date_of_birth = models.DateField(
839 |           _("Date of Birth of Pengurus (from Danasaham Core)"),
    |

backend/app/config/core/models.py:843:31: DJ001 Avoid using `null=True` on string-based fields such as `CharField`
    |
841 |           null=True,
842 |       )
843 |       pengurus_corporate_npwp = models.CharField(
    |  _______________________________^
844 | |         _("NPWP of Pengurus (from Danasaham Core)"),
845 | |         max_length=50,
846 | |         blank=True,
847 | |         null=True,
848 | |     )
    | |_____^ DJ001
849 |       pengurus_corporate_domicile_address = models.TextField(
850 |           _("Domicile Address of Pengurus (from Danasaham Core)"),
    |

backend/app/config/core/models.py:849:43: DJ001 Avoid using `null=True` on string-based fields such as `TextField`
    |
847 |           null=True,
848 |       )
849 |       pengurus_corporate_domicile_address = models.TextField(
    |  ___________________________________________^
850 | |         _("Domicile Address of Pengurus (from Danasaham Core)"),
851 | |         blank=True,
852 | |         null=True,
853 | |     )
    | |_____^ DJ001
854 |       pengurus_corporate_jabatan = models.CharField(
855 |           _("Jabatan of Pengurus (from Danasaham Core)"),
    |

backend/app/config/core/models.py:854:34: DJ001 Avoid using `null=True` on string-based fields such as `CharField`
    |
852 |           null=True,
853 |       )
854 |       pengurus_corporate_jabatan = models.CharField(
    |  __________________________________^
855 | |         _("Jabatan of Pengurus (from Danasaham Core)"),
856 | |         max_length=255,
857 | |         blank=True,
858 | |         null=True,
859 | |     )
    | |_____^ DJ001
860 |       pengurus_nominal_saham = models.CharField(
861 |           _("Nominal Saham of Pengurus (from Danasaham Core)"),
    |

backend/app/config/core/models.py:860:30: DJ001 Avoid using `null=True` on string-based fields such as `CharField`
    |
858 |           null=True,
859 |       )
860 |       pengurus_nominal_saham = models.CharField(
    |  ______________________________^
861 | |         _("Nominal Saham of Pengurus (from Danasaham Core)"),
862 | |         max_length=255,
863 | |         blank=True,
864 | |         null=True,
865 | |     )
    | |_____^ DJ001
866 |       pengurus_corporate_last_update_date = models.DateTimeField(
867 |           _("Last Update Date of Pengurus (from Danasaham Core)"),
    |

backend/app/config/core/models.py:876:30: DJ001 Avoid using `null=True` on string-based fields such as `CharField`
    |
874 |           null=True,
875 |       )
876 |       corporate_company_name = models.CharField(
    |  ______________________________^
877 | |         _("Corporate Name (from Danasaham Core)"),
878 | |         max_length=255,
879 | |         blank=True,
880 | |         null=True,
881 | |     )
    | |_____^ DJ001
882 |       corporate_phone_number = models.CharField(
883 |           _("Corporate Phone Number (from Danasaham Core)"),
    |

backend/app/config/core/models.py:882:30: DJ001 Avoid using `null=True` on string-based fields such as `CharField`
    |
880 |           null=True,
881 |       )
882 |       corporate_phone_number = models.CharField(
    |  ______________________________^
883 | |         _("Corporate Phone Number (from Danasaham Core)"),
884 | |         max_length=20,
885 | |         blank=True,
886 | |         null=True,
887 | |     )
    | |_____^ DJ001
888 |       corporate_nib = models.CharField(
889 |           _("Corporate NIB (from Danasaham Core)"),
    |

backend/app/config/core/models.py:888:21: DJ001 Avoid using `null=True` on string-based fields such as `CharField`
    |
886 |           null=True,
887 |       )
888 |       corporate_nib = models.CharField(
    |  _____________________^
889 | |         _("Corporate NIB (from Danasaham Core)"),
890 | |         max_length=50,
891 | |         blank=True,
892 | |         null=True,
893 | |     )
    | |_____^ DJ001
894 |       corporate_npwp = models.CharField(
895 |           _("Corporate NPWP (from Danasaham Core)"),
    |

backend/app/config/core/models.py:894:22: DJ001 Avoid using `null=True` on string-based fields such as `CharField`
    |
892 |           null=True,
893 |       )
894 |       corporate_npwp = models.CharField(
    |  ______________________^
895 | |         _("Corporate NPWP (from Danasaham Core)"),
896 | |         max_length=50,
897 | |         blank=True,
898 | |         null=True,
899 | |     )
    | |_____^ DJ001
900 |       corporate_siup = models.CharField(
901 |           _("Corporate SIUP (from Danasaham Core)"),
    |

backend/app/config/core/models.py:900:22: DJ001 Avoid using `null=True` on string-based fields such as `CharField`
    |
898 |           null=True,
899 |       )
900 |       corporate_siup = models.CharField(
    |  ______________________^
901 | |         _("Corporate SIUP (from Danasaham Core)"),
902 | |         max_length=50,
903 | |         blank=True,
904 | |         null=True,
905 | |     )
    | |_____^ DJ001
906 |       corporate_skdp = models.CharField(
907 |           _("Corporate SKDP (from Danasaham Core)"),
    |

backend/app/config/core/models.py:906:22: DJ001 Avoid using `null=True` on string-based fields such as `CharField`
    |
904 |           null=True,
905 |       )
906 |       corporate_skdp = models.CharField(
    |  ______________________^
907 | |         _("Corporate SKDP (from Danasaham Core)"),
908 | |         max_length=50,
909 | |         blank=True,
910 | |         null=True,
911 | |     )
    | |_____^ DJ001
912 |       corporate_legal_last_modified_date = models.DateTimeField(
913 |           _("Corporate Legal Last Modified Date (from Danasaham Core)"),
    |

backend/app/config/core/models.py:917:34: DJ001 Avoid using `null=True` on string-based fields such as `TextField`
    |
915 |           null=True,
916 |       )
917 |       corporate_domicile_address = models.TextField(
    |  __________________________________^
918 | |         _("Corporate Domicile Address (from Danasaham Core)"),
919 | |         blank=True,
920 | |         null=True,
921 | |     )
    | |_____^ DJ001
922 |       corporate_asset = models.TextField(
923 |           _("Corporate Asset (from Danasaham Core)"),
    |

backend/app/config/core/models.py:922:23: DJ001 Avoid using `null=True` on string-based fields such as `TextField`
    |
920 |           null=True,
921 |       )
922 |       corporate_asset = models.TextField(
    |  _______________________^
923 | |         _("Corporate Asset (from Danasaham Core)"),
924 | |         blank=True,
925 | |         null=True,
926 | |     )
    | |_____^ DJ001
927 |       corporate_source_of_fund = models.TextField(
928 |           _("Corporate Source of Fund (from Danasaham Core)"),
    |

backend/app/config/core/models.py:927:32: DJ001 Avoid using `null=True` on string-based fields such as `TextField`
    |
925 |           null=True,
926 |       )
927 |       corporate_source_of_fund = models.TextField(
    |  ________________________________^
928 | |         _("Corporate Source of Fund (from Danasaham Core)"),
929 | |         blank=True,
930 | |         null=True,
931 | |     )
    | |_____^ DJ001
932 |       corporate_business_field = models.TextField(
933 |           _("Corporate Business Field (from Danasaham Core)"),
    |

backend/app/config/core/models.py:932:32: DJ001 Avoid using `null=True` on string-based fields such as `TextField`
    |
930 |           null=True,
931 |       )
932 |       corporate_business_field = models.TextField(
    |  ________________________________^
933 | |         _("Corporate Business Field (from Danasaham Core)"),
934 | |         blank=True,
935 | |         null=True,
936 | |     )
    | |_____^ DJ001
937 |       corporate_type_of_annual_income = models.TextField(
938 |           _("Corporate Type of Annual Income (from Danasaham Core)"),
    |

backend/app/config/core/models.py:937:39: DJ001 Avoid using `null=True` on string-based fields such as `TextField`
    |
935 |           null=True,
936 |       )
937 |       corporate_type_of_annual_income = models.TextField(
    |  _______________________________________^
938 | |         _("Corporate Type of Annual Income (from Danasaham Core)"),
939 | |         blank=True,
940 | |         null=True,
941 | |     )
    | |_____^ DJ001
942 |       corporate_annual_income = models.TextField(
943 |           _("Corporate Annual Income (from Danasaham Core)"),
    |

backend/app/config/core/models.py:942:31: DJ001 Avoid using `null=True` on string-based fields such as `TextField`
    |
940 |           null=True,
941 |       )
942 |       corporate_annual_income = models.TextField(
    |  _______________________________^
943 | |         _("Corporate Annual Income (from Danasaham Core)"),
944 | |         blank=True,
945 | |         null=True,
946 | |     )
    | |_____^ DJ001
947 |       corporate_investment_goals = models.TextField(
948 |           _("Corporate Investment Goals (from Danasaham Core)"),
    |

backend/app/config/core/models.py:947:34: DJ001 Avoid using `null=True` on string-based fields such as `TextField`
    |
945 |           null=True,
946 |       )
947 |       corporate_investment_goals = models.TextField(
    |  __________________________________^
948 | |         _("Corporate Investment Goals (from Danasaham Core)"),
949 | |         blank=True,
950 | |         null=True,
951 | |     )
    | |_____^ DJ001
952 |
953 |       def __str__(self) -> str:
    |

backend/app/config/core/models.py:957:7: N801 Class name `dttotDocReport` should use CapWords convention
    |
957 | class dttotDocReport(models.Model):
    |       ^^^^^^^^^^^^^^ N801
958 |     dttotdoc_report_id = models.UUIDField(
959 |         default=uuid.uuid4,
    |

backend/app/config/core/models.py:1001:7: N801 Class name `dttotDocReportPersonal` should use CapWords convention
     |
1001 | class dttotDocReportPersonal(models.Model):
     |       ^^^^^^^^^^^^^^^^^^^^^^ N801
1002 |     dttotdoc_report = models.ForeignKey(
1003 |         "dttotDocReport",
     |

backend/app/config/core/models.py:1054:7: N801 Class name `dttotDocReportCorporate` should use CapWords convention
     |
1054 | class dttotDocReportCorporate(models.Model):
     |       ^^^^^^^^^^^^^^^^^^^^^^^ N801
1055 |     dttotdoc_report = models.ForeignKey(
1056 |         "dttotDocReport",
     |

backend/app/config/core/models.py:1107:7: N801 Class name `dttotDocReportCorporatePengurus` should use CapWords convention
     |
1107 | class dttotDocReportCorporatePengurus(models.Model):
     |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ N801
1108 |     dttotdoc_report = models.ForeignKey(
1109 |         "dttotDocReport",
     |

backend/app/config/core/models.py:1121:21: DJ001 Avoid using `null=True` on string-based fields such as `CharField`
     |
1119 |       )
1120 |       pengurus_id = models.UUIDField(_("Pengurus ID"), default=uuid.uuid4, editable=False)
1121 |       pengurus_name = models.CharField(
     |  _____________________^
1122 | |         _("Pengurus Name"),
1123 | |         max_length=255,
1124 | |         blank=True,
1125 | |         null=True,
1126 | |     )
     | |_____^ DJ001
1127 |       pengurus_id_number = models.CharField(
1128 |           _("Pengurus ID Number"),
     |

backend/app/config/core/models.py:1127:26: DJ001 Avoid using `null=True` on string-based fields such as `CharField`
     |
1125 |           null=True,
1126 |       )
1127 |       pengurus_id_number = models.CharField(
     |  __________________________^
1128 | |         _("Pengurus ID Number"),
1129 | |         max_length=50,
1130 | |         blank=True,
1131 | |         null=True,
1132 | |     )
     | |_____^ DJ001
1133 |       pengurus_phone_number = models.CharField(
1134 |           _("Pengurus Phone Number"),
     |

backend/app/config/core/models.py:1133:29: DJ001 Avoid using `null=True` on string-based fields such as `CharField`
     |
1131 |           null=True,
1132 |       )
1133 |       pengurus_phone_number = models.CharField(
     |  _____________________________^
1134 | |         _("Pengurus Phone Number"),
1135 | |         max_length=20,
1136 | |         blank=True,
1137 | |         null=True,
1138 | |     )
     | |_____^ DJ001
1139 |       pengurus_place_of_birth = models.CharField(
1140 |           _("Place of Birth of Pengurus"),
     |

backend/app/config/core/models.py:1139:31: DJ001 Avoid using `null=True` on string-based fields such as `CharField`
     |
1137 |           null=True,
1138 |       )
1139 |       pengurus_place_of_birth = models.CharField(
     |  _______________________________^
1140 | |         _("Place of Birth of Pengurus"),
1141 | |         max_length=255,
1142 | |         blank=True,
1143 | |         null=True,
1144 | |     )
     | |_____^ DJ001
1145 |       pengurus_date_of_birth = models.DateField(
1146 |           _("Date of Birth of Pengurus"),
     |

backend/app/config/core/models.py:1150:21: DJ001 Avoid using `null=True` on string-based fields such as `CharField`
     |
1148 |           null=True,
1149 |       )
1150 |       pengurus_npwp = models.CharField(
     |  _____________________^
1151 | |         _("NPWP of Pengurus"),
1152 | |         max_length=50,
1153 | |         blank=True,
1154 | |         null=True,
1155 | |     )
     | |_____^ DJ001
1156 |       pengurus_domicile_address = models.TextField(
1157 |           _("Domicile Address of Pengurus"),
     |

backend/app/config/core/models.py:1156:33: DJ001 Avoid using `null=True` on string-based fields such as `TextField`
     |
1154 |           null=True,
1155 |       )
1156 |       pengurus_domicile_address = models.TextField(
     |  _________________________________^
1157 | |         _("Domicile Address of Pengurus"),
1158 | |         blank=True,
1159 | |         null=True,
1160 | |     )
     | |_____^ DJ001
1161 |       pengurus_jabatan = models.CharField(
1162 |           _("Jabatan of Pengurus"),
     |

backend/app/config/core/models.py:1161:24: DJ001 Avoid using `null=True` on string-based fields such as `CharField`
     |
1159 |           null=True,
1160 |       )
1161 |       pengurus_jabatan = models.CharField(
     |  ________________________^
1162 | |         _("Jabatan of Pengurus"),
1163 | |         max_length=255,
1164 | |         blank=True,
1165 | |         null=True,
1166 | |     )
     | |_____^ DJ001
1167 |       pengurus_nominal_saham = models.CharField(
1168 |           _("Nominal Saham of Pengurus"),
     |

backend/app/config/core/models.py:1167:30: DJ001 Avoid using `null=True` on string-based fields such as `CharField`
     |
1165 |           null=True,
1166 |       )
1167 |       pengurus_nominal_saham = models.CharField(
     |  ______________________________^
1168 | |         _("Nominal Saham of Pengurus"),
1169 | |         max_length=255,
1170 | |         blank=True,
1171 | |         null=True,
1172 | |     )
     | |_____^ DJ001
1173 |       pengurus_last_update_date = models.DateTimeField(
1174 |           _("Last Update Date of Pengurus"),
     |

backend/app/config/core/models.py:1200:7: N801 Class name `dttotDocReportPublisher` should use CapWords convention
     |
1200 | class dttotDocReportPublisher(models.Model):
     |       ^^^^^^^^^^^^^^^^^^^^^^^ N801
1201 |     dttotdoc_report = models.ForeignKey(
1202 |         "dttotDocReport",
     |

backend/app/config/core/models.py:1253:7: N801 Class name `dttotDocReportPublisherPengurus` should use CapWords convention
     |
1253 | class dttotDocReportPublisherPengurus(models.Model):
     |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ N801
1254 |     dttotdoc_report_publisher = models.ForeignKey(
1255 |         "dttotDocReportPublisher",
     |

backend/app/config/core/models.py:1267:21: DJ001 Avoid using `null=True` on string-based fields such as `CharField`
     |
1265 |       )
1266 |       pengurus_id = models.UUIDField(_("Pengurus ID"), default=uuid.uuid4, editable=False)
1267 |       pengurus_name = models.CharField(
     |  _____________________^
1268 | |         _("Pengurus Name"),
1269 | |         max_length=255,
1270 | |         blank=True,
1271 | |         null=True,
1272 | |     )
     | |_____^ DJ001
1273 |       pengurus_id_number = models.CharField(
1274 |           _("Pengurus ID Number"),
     |

backend/app/config/core/models.py:1273:26: DJ001 Avoid using `null=True` on string-based fields such as `CharField`
     |
1271 |           null=True,
1272 |       )
1273 |       pengurus_id_number = models.CharField(
     |  __________________________^
1274 | |         _("Pengurus ID Number"),
1275 | |         max_length=50,
1276 | |         blank=True,
1277 | |         null=True,
1278 | |     )
     | |_____^ DJ001
1279 |       pengurus_phone_number = models.CharField(
1280 |           _("Pengurus Phone Number"),
     |

backend/app/config/core/models.py:1279:29: DJ001 Avoid using `null=True` on string-based fields such as `CharField`
     |
1277 |           null=True,
1278 |       )
1279 |       pengurus_phone_number = models.CharField(
     |  _____________________________^
1280 | |         _("Pengurus Phone Number"),
1281 | |         max_length=20,
1282 | |         blank=True,
1283 | |         null=True,
1284 | |     )
     | |_____^ DJ001
1285 |       pengurus_place_of_birth = models.CharField(
1286 |           _("Place of Birth of Pengurus"),
     |

backend/app/config/core/models.py:1285:31: DJ001 Avoid using `null=True` on string-based fields such as `CharField`
     |
1283 |           null=True,
1284 |       )
1285 |       pengurus_place_of_birth = models.CharField(
     |  _______________________________^
1286 | |         _("Place of Birth of Pengurus"),
1287 | |         max_length=255,
1288 | |         blank=True,
1289 | |         null=True,
1290 | |     )
     | |_____^ DJ001
1291 |       pengurus_date_of_birth = models.DateField(
1292 |           _("Date of Birth of Pengurus"),
     |

backend/app/config/core/models.py:1296:21: DJ001 Avoid using `null=True` on string-based fields such as `CharField`
     |
1294 |           null=True,
1295 |       )
1296 |       pengurus_npwp = models.CharField(
     |  _____________________^
1297 | |         _("NPWP of Pengurus"),
1298 | |         max_length=50,
1299 | |         blank=True,
1300 | |         null=True,
1301 | |     )
     | |_____^ DJ001
1302 |       pengurus_domicile_address = models.TextField(
1303 |           _("Domicile Address of Pengurus"),
     |

backend/app/config/core/models.py:1302:33: DJ001 Avoid using `null=True` on string-based fields such as `TextField`
     |
1300 |           null=True,
1301 |       )
1302 |       pengurus_domicile_address = models.TextField(
     |  _________________________________^
1303 | |         _("Domicile Address of Pengurus"),
1304 | |         blank=True,
1305 | |         null=True,
1306 | |     )
     | |_____^ DJ001
1307 |       pengurus_jabatan = models.CharField(
1308 |           _("Jabatan of Pengurus"),
     |

backend/app/config/core/models.py:1307:24: DJ001 Avoid using `null=True` on string-based fields such as `CharField`
     |
1305 |           null=True,
1306 |       )
1307 |       pengurus_jabatan = models.CharField(
     |  ________________________^
1308 | |         _("Jabatan of Pengurus"),
1309 | |         max_length=255,
1310 | |         blank=True,
1311 | |         null=True,
1312 | |     )
     | |_____^ DJ001
1313 |       pengurus_nominal_saham = models.CharField(
1314 |           _("Nominal Saham of Pengurus"),
     |

backend/app/config/core/models.py:1313:30: DJ001 Avoid using `null=True` on string-based fields such as `CharField`
     |
1311 |           null=True,
1312 |       )
1313 |       pengurus_nominal_saham = models.CharField(
     |  ______________________________^
1314 | |         _("Nominal Saham of Pengurus"),
1315 | |         max_length=255,
1316 | |         blank=True,
1317 | |         null=True,
1318 | |     )
     | |_____^ DJ001
1319 |       pengurus_last_update_date = models.DateTimeField(
1320 |           _("Last Update Date of Pengurus"),
     |

backend/app/config/core/tests/test_admin.py:32:13: S106 Possible hardcoded password assigned to argument: "password"
   |
30 |             email="test@example.com",
31 |             username="testuser",
32 |             password="Testp@ss!23",
   |             ^^^^^^^^^^^^^^^^^^^^^^ S106
33 |         )
   |

backend/app/config/core/tests/test_admin.py:38:13: S106 Possible hardcoded password assigned to argument: "password"
   |
36 |             email="admin@example.com",
37 |             username="adminuser",
38 |             password="adminpass123",
   |             ^^^^^^^^^^^^^^^^^^^^^^^ S106
39 |         )
40 |         cls.user_profile = UserProfile.objects.create(
   |

backend/app/config/core/tests/test_admin.py:62:9: D205 1 blank line required between summary line and description
   |
61 |       def test_user_search_fields(self) -> None:
62 |           """Test that search fields are properly set for user admin,
   |  _________^
63 | |         including UserProfile fields.
64 | |         """
   | |___________^ D205
65 |           # Searching by email
66 |           search_response_email = self.client.get(
   |
   = help: Insert single blank line

backend/app/config/core/tests/test_admin.py:108:9: S101 Use of `assert` detected
    |
106 |         """Test the create user page works."""
107 |         response = self.client.get(reverse("admin:core_user_add"))
108 |         assert response.status_code == 200
    |         ^^^^^^ S101
    |

backend/app/config/core/tests/test_admin.py:108:40: PLR2004 Magic value used in comparison, consider replacing `200` with a constant variable
    |
106 |         """Test the create user page works."""
107 |         response = self.client.get(reverse("admin:core_user_add"))
108 |         assert response.status_code == 200
    |                                        ^^^ PLR2004
    |

backend/app/config/core/tests/test_admin.py:125:13: S106 Possible hardcoded password assigned to argument: "password"
    |
123 |             email="admin@example.com",
124 |             username="adminuser",
125 |             password="adminpass123",
    |             ^^^^^^^^^^^^^^^^^^^^^^^ S106
126 |         )
127 |         self.client.force_login(self.admin_user)
    |

backend/app/config/core/tests/test_admin.py:132:13: S106 Possible hardcoded password assigned to argument: "password"
    |
130 |             email="user@example.com",
131 |             username="normaluser",
132 |             password="password123",
    |             ^^^^^^^^^^^^^^^^^^^^^^ S106
133 |         )
    |

backend/app/config/core/tests/test_admin.py:199:9: S101 Use of `assert` detected
    |
197 |         url = reverse("admin:core_dttotdoc_change", args=[self.dttot_doc.dttot_id])
198 |         response = self.client.get(url)
199 |         assert response.status_code == 200
    |         ^^^^^^ S101
200 |
201 |     def test_create_page(self) -> None:
    |

backend/app/config/core/tests/test_admin.py:199:40: PLR2004 Magic value used in comparison, consider replacing `200` with a constant variable
    |
197 |         url = reverse("admin:core_dttotdoc_change", args=[self.dttot_doc.dttot_id])
198 |         response = self.client.get(url)
199 |         assert response.status_code == 200
    |                                        ^^^ PLR2004
200 |
201 |     def test_create_page(self) -> None:
    |

backend/app/config/core/tests/test_admin.py:205:9: S101 Use of `assert` detected
    |
203 |         url = reverse("admin:core_dttotdoc_add")
204 |         response = self.client.get(url)
205 |         assert response.status_code == 200
    |         ^^^^^^ S101
    |

backend/app/config/core/tests/test_admin.py:205:40: PLR2004 Magic value used in comparison, consider replacing `200` with a constant variable
    |
203 |         url = reverse("admin:core_dttotdoc_add")
204 |         response = self.client.get(url)
205 |         assert response.status_code == 200
    |                                        ^^^ PLR2004
    |

backend/app/config/core/tests/test_admin.py:222:13: S106 Possible hardcoded password assigned to argument: "password"
    |
220 |             email="admin@example.com",
221 |             username="adminuser",
222 |             password="adminpass123",
    |             ^^^^^^^^^^^^^^^^^^^^^^^ S106
223 |         )
224 |         self.client.force_login(self.admin_user)
    |

backend/app/config/core/tests/test_admin.py:229:13: S106 Possible hardcoded password assigned to argument: "password"
    |
227 |             email="user@example.com",
228 |             username="normaluser",
229 |             password="password123",
    |             ^^^^^^^^^^^^^^^^^^^^^^ S106
230 |         )
    |

backend/app/config/core/tests/test_admin.py:271:9: S101 Use of `assert` detected
    |
269 |         res = self.client.get(url)
270 |
271 |         assert res.status_code == 200
    |         ^^^^^^ S101
272 |
273 |     def test_document_add_page(self) -> None:
    |

backend/app/config/core/tests/test_admin.py:271:35: PLR2004 Magic value used in comparison, consider replacing `200` with a constant variable
    |
269 |         res = self.client.get(url)
270 |
271 |         assert res.status_code == 200
    |                                   ^^^ PLR2004
272 |
273 |     def test_document_add_page(self) -> None:
    |

backend/app/config/core/tests/test_admin.py:278:9: S101 Use of `assert` detected
    |
276 |         res = self.client.get(url)
277 |
278 |         assert res.status_code == 200
    |         ^^^^^^ S101
279 |
280 |     def tearDown(self) -> None:
    |

backend/app/config/core/tests/test_admin.py:278:35: PLR2004 Magic value used in comparison, consider replacing `200` with a constant variable
    |
276 |         res = self.client.get(url)
277 |
278 |         assert res.status_code == 200
    |                                   ^^^ PLR2004
279 |
280 |     def tearDown(self) -> None:
    |

backend/app/config/core/tests/test_commands.py:17:38: ANN001 Missing type annotation for function argument `patched_check`
   |
15 |     """Test commands."""
16 |
17 |     def test_wait_for_db_ready(self, patched_check) -> None:
   |                                      ^^^^^^^^^^^^^ ANN001
18 |         """Test waiting for database if database ready."""
19 |         patched_check.return_value = True
   |

backend/app/config/core/tests/test_commands.py:26:38: ANN001 Missing type annotation for function argument `patched_sleep`
   |
25 |     @patch("time.sleep")
26 |     def test_wait_for_db_delay(self, patched_sleep, patched_check) -> None:
   |                                      ^^^^^^^^^^^^^ ANN001
27 |         """Test waiting for database when getting OperationalError."""
28 |         patched_check.side_effect = (
   |

backend/app/config/core/tests/test_commands.py:26:38: ARG002 Unused method argument: `patched_sleep`
   |
25 |     @patch("time.sleep")
26 |     def test_wait_for_db_delay(self, patched_sleep, patched_check) -> None:
   |                                      ^^^^^^^^^^^^^ ARG002
27 |         """Test waiting for database when getting OperationalError."""
28 |         patched_check.side_effect = (
   |

backend/app/config/core/tests/test_commands.py:26:53: ANN001 Missing type annotation for function argument `patched_check`
   |
25 |     @patch("time.sleep")
26 |     def test_wait_for_db_delay(self, patched_sleep, patched_check) -> None:
   |                                                     ^^^^^^^^^^^^^ ANN001
27 |         """Test waiting for database when getting OperationalError."""
28 |         patched_check.side_effect = (
   |

backend/app/config/core/tests/test_commands.py:34:9: S101 Use of `assert` detected
   |
32 |         call_command("wait_for_db")
33 |
34 |         assert patched_check.call_count == 6
   |         ^^^^^^ S101
35 |         patched_check.assert_called_with(databases=["default"])
   |

backend/app/config/core/tests/test_commands.py:34:44: PLR2004 Magic value used in comparison, consider replacing `6` with a constant variable
   |
32 |         call_command("wait_for_db")
33 |
34 |         assert patched_check.call_count == 6
   |                                            ^ PLR2004
35 |         patched_check.assert_called_with(databases=["default"])
   |

backend/app/config/core/tests/test_models.py:26:25: S105 Possible hardcoded password assigned to: "password"
   |
24 |         self.email = "test@example.com"
25 |         self.username = "testuser"
26 |         self.password = "Testp@ss!23"
   |                         ^^^^^^^^^^^^^ S105
27 |         self.user = User.objects.create_user(
28 |             email=self.email,
   |

backend/app/config/core/tests/test_models.py:35:9: S101 Use of `assert` detected
   |
33 |     def test_create_user_with_email_successful(self) -> None:
34 |         """Test creating a user with an email is successful."""
35 |         assert self.user.email == self.email
   |         ^^^^^^ S101
36 |         assert self.user.check_password(self.password)
   |

backend/app/config/core/tests/test_models.py:36:9: S101 Use of `assert` detected
   |
34 |         """Test creating a user with an email is successful."""
35 |         assert self.user.email == self.email
36 |         assert self.user.check_password(self.password)
   |         ^^^^^^ S101
37 |
38 |     def test_create_superuser(self) -> None:
   |

backend/app/config/core/tests/test_models.py:43:13: S106 Possible hardcoded password assigned to argument: "password"
   |
41 |             email="admin@example.com",
42 |             username="adminuser",
43 |             password="adminpass123",
   |             ^^^^^^^^^^^^^^^^^^^^^^^ S106
44 |         )
45 |         assert superuser.is_staff
   |

backend/app/config/core/tests/test_models.py:45:9: S101 Use of `assert` detected
   |
43 |             password="adminpass123",
44 |         )
45 |         assert superuser.is_staff
   |         ^^^^^^ S101
46 |         assert superuser.is_superuser
   |

backend/app/config/core/tests/test_models.py:46:9: S101 Use of `assert` detected
   |
44 |         )
45 |         assert superuser.is_staff
46 |         assert superuser.is_superuser
   |         ^^^^^^ S101
47 |
48 |     def test_new_user_email_normalized(self) -> None:
   |

backend/app/config/core/tests/test_models.py:51:61: S106 Possible hardcoded password assigned to argument: "password"
   |
49 |         """Test email is normalized for new users."""
50 |         email = "testuser2@EXAMPLE.COM"
51 |         user = User.objects.create_user(email, "sample123", password="Testp@ss!23")
   |                                                             ^^^^^^^^^^^^^^^^^^^^^^ S106
52 |         assert user.email == email.lower()
   |

backend/app/config/core/tests/test_models.py:52:9: S101 Use of `assert` detected
   |
50 |         email = "testuser2@EXAMPLE.COM"
51 |         user = User.objects.create_user(email, "sample123", password="Testp@ss!23")
52 |         assert user.email == email.lower()
   |         ^^^^^^ S101
53 |
54 |     def test_new_user_without_email_raises_error(self) -> None:
   |

backend/app/config/core/tests/test_models.py:56:28: PT011 `pytest.raises(ValueError)` is too broad, set the `match` parameter or use a more specific exception
   |
54 |     def test_new_user_without_email_raises_error(self) -> None:
55 |         """Test that creating a user without an email raises a ValueError."""
56 |         with pytest.raises(ValueError):
   |                            ^^^^^^^^^^ PT011
57 |             User.objects.create_user("", "test123", password="Testp@ss!23")
   |

backend/app/config/core/tests/test_models.py:57:53: S106 Possible hardcoded password assigned to argument: "password"
   |
55 |         """Test that creating a user without an email raises a ValueError."""
56 |         with pytest.raises(ValueError):
57 |             User.objects.create_user("", "test123", password="Testp@ss!23")
   |                                                     ^^^^^^^^^^^^^^^^^^^^^^ S106
58 |
59 |     def test_user_id_as_primary_key(self) -> None:
   |

backend/app/config/core/tests/test_models.py:61:9: S101 Use of `assert` detected
   |
59 |     def test_user_id_as_primary_key(self) -> None:
60 |         """Test that the user_id field is used as the primary key."""
61 |         assert hasattr(self.user, "user_id")
   |         ^^^^^^ S101
62 |         assert self.user.user_id is not None
   |

backend/app/config/core/tests/test_models.py:62:9: S101 Use of `assert` detected
   |
60 |         """Test that the user_id field is used as the primary key."""
61 |         assert hasattr(self.user, "user_id")
62 |         assert self.user.user_id is not None
   |         ^^^^^^ S101
   |

backend/app/config/core/tests/test_models.py:71:25: S105 Possible hardcoded password assigned to: "password"
   |
69 |         self.email = "test@example.com"
70 |         self.username = "testuser"
71 |         self.password = "Testp@ss!23"
   |                         ^^^^^^^^^^^^^ S105
72 |         self.user = User.objects.create_user(
73 |             email=self.email,
   |

backend/app/config/core/tests/test_models.py:90:9: S101 Use of `assert` detected
   |
88 |     def test_user_profile_creation(self) -> None:
89 |         """Test the user profile is created successfully."""
90 |         assert self.user_profile.user.username == "testuser"
   |         ^^^^^^ S101
91 |         assert self.user_profile.bio == "This is a test bio."
92 |         assert self.user_profile.phone_number == "1234567890"
   |

backend/app/config/core/tests/test_models.py:91:9: S101 Use of `assert` detected
   |
89 |         """Test the user profile is created successfully."""
90 |         assert self.user_profile.user.username == "testuser"
91 |         assert self.user_profile.bio == "This is a test bio."
   |         ^^^^^^ S101
92 |         assert self.user_profile.phone_number == "1234567890"
93 |         assert self.user_profile.birth_date == date(1990, 1, 1)
   |

backend/app/config/core/tests/test_models.py:92:9: S101 Use of `assert` detected
   |
90 |         assert self.user_profile.user.username == "testuser"
91 |         assert self.user_profile.bio == "This is a test bio."
92 |         assert self.user_profile.phone_number == "1234567890"
   |         ^^^^^^ S101
93 |         assert self.user_profile.birth_date == date(1990, 1, 1)
94 |         assert self.user_profile.first_name == "Test"
   |

backend/app/config/core/tests/test_models.py:93:9: S101 Use of `assert` detected
   |
91 |         assert self.user_profile.bio == "This is a test bio."
92 |         assert self.user_profile.phone_number == "1234567890"
93 |         assert self.user_profile.birth_date == date(1990, 1, 1)
   |         ^^^^^^ S101
94 |         assert self.user_profile.first_name == "Test"
95 |         assert self.user_profile.last_name == "User"
   |

backend/app/config/core/tests/test_models.py:94:9: S101 Use of `assert` detected
   |
92 |         assert self.user_profile.phone_number == "1234567890"
93 |         assert self.user_profile.birth_date == date(1990, 1, 1)
94 |         assert self.user_profile.first_name == "Test"
   |         ^^^^^^ S101
95 |         assert self.user_profile.last_name == "User"
   |

backend/app/config/core/tests/test_models.py:95:9: S101 Use of `assert` detected
   |
93 |         assert self.user_profile.birth_date == date(1990, 1, 1)
94 |         assert self.user_profile.first_name == "Test"
95 |         assert self.user_profile.last_name == "User"
   |         ^^^^^^ S101
96 |
97 |     def test_user_profile_str(self) -> None:
   |

backend/app/config/core/tests/test_models.py:99:9: S101 Use of `assert` detected
   |
97 |     def test_user_profile_str(self) -> None:
98 |         """Test the string representation of the user profile."""
99 |         assert str(self.user_profile) == "testuser"
   |         ^^^^^^ S101
   |

backend/app/config/core/tests/test_models.py:110:13: S106 Possible hardcoded password assigned to argument: "password"
    |
108 |             email="testuser@example.com",
109 |             username="testuser",
110 |             password="Testp@ss!23",
    |             ^^^^^^^^^^^^^^^^^^^^^^ S106
111 |         )
112 |         self.dttot_doc = dttotDoc.objects.create(
    |

backend/app/config/core/tests/test_models.py:125:9: S101 Use of `assert` detected
    |
123 |     def test_str_representation(self) -> None:
124 |         # Test the string representation of the model
125 |         assert str(self.dttot_doc) == "John Doe - Personal"
    |         ^^^^^^ S101
    |

backend/app/config/core/tests/test_models.py:128:31: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
    |
128 | @override_settings(MEDIA_ROOT=os.path.join(settings.BASE_DIR, "media", "test_media"))
    |                               ^^^^^^^^^^^^ PTH118
129 | class DocumentModelTests(TestCase):
    |

backend/app/config/core/tests/test_models.py:137:13: S106 Possible hardcoded password assigned to argument: "password"
    |
135 |             email="test@example.com",
136 |             username="testuser",
137 |             password="Testp@ss!23",
    |             ^^^^^^^^^^^^^^^^^^^^^^ S106
138 |         )
    |

backend/app/config/core/tests/test_models.py:164:9: S101 Use of `assert` detected
    |
162 |             updated_by=self.user,
163 |         )
164 |         assert document.document_name == "Test Document"
    |         ^^^^^^ S101
165 |         assert document.description == "A test document description."
166 |         assert document.document_type == "Type1"
    |

backend/app/config/core/tests/test_models.py:165:9: S101 Use of `assert` detected
    |
163 |         )
164 |         assert document.document_name == "Test Document"
165 |         assert document.description == "A test document description."
    |         ^^^^^^ S101
166 |         assert document.document_type == "Type1"
167 |         assert document.created_by == self.user
    |

backend/app/config/core/tests/test_models.py:166:9: S101 Use of `assert` detected
    |
164 |         assert document.document_name == "Test Document"
165 |         assert document.description == "A test document description."
166 |         assert document.document_type == "Type1"
    |         ^^^^^^ S101
167 |         assert document.created_by == self.user
168 |         assert document.updated_by == self.user
    |

backend/app/config/core/tests/test_models.py:167:9: S101 Use of `assert` detected
    |
165 |         assert document.description == "A test document description."
166 |         assert document.document_type == "Type1"
167 |         assert document.created_by == self.user
    |         ^^^^^^ S101
168 |         assert document.updated_by == self.user
    |

backend/app/config/core/tests/test_models.py:168:9: S101 Use of `assert` detected
    |
166 |         assert document.document_type == "Type1"
167 |         assert document.created_by == self.user
168 |         assert document.updated_by == self.user
    |         ^^^^^^ S101
169 |
170 |     def test_document_str(self) -> None:
    |

backend/app/config/core/tests/test_models.py:179:9: S101 Use of `assert` detected
    |
177 |             updated_by=self.user,
178 |         )
179 |         assert str(document) == "Test Document"
    |         ^^^^^^ S101
180 |
181 |     def upload_document_test_helper(self, file_name, file_content, document_type) -> None:
    |

backend/app/config/core/tests/test_models.py:181:43: ANN001 Missing type annotation for function argument `file_name`
    |
179 |         assert str(document) == "Test Document"
180 |
181 |     def upload_document_test_helper(self, file_name, file_content, document_type) -> None:
    |                                           ^^^^^^^^^ ANN001
182 |         document_file = SimpleUploadedFile(
183 |             file_name,
    |

backend/app/config/core/tests/test_models.py:181:54: ANN001 Missing type annotation for function argument `file_content`
    |
179 |         assert str(document) == "Test Document"
180 |
181 |     def upload_document_test_helper(self, file_name, file_content, document_type) -> None:
    |                                                      ^^^^^^^^^^^^ ANN001
182 |         document_file = SimpleUploadedFile(
183 |             file_name,
    |

backend/app/config/core/tests/test_models.py:181:68: ANN001 Missing type annotation for function argument `document_type`
    |
179 |         assert str(document) == "Test Document"
180 |
181 |     def upload_document_test_helper(self, file_name, file_content, document_type) -> None:
    |                                                                    ^^^^^^^^^^^^^ ANN001
182 |         document_file = SimpleUploadedFile(
183 |             file_name,
    |

backend/app/config/core/tests/test_models.py:198:9: S101 Use of `assert` detected
    |
197 |         # Check if document and file exist
198 |         assert Document.objects.filter(pk=document.document_id).exists()
    |         ^^^^^^ S101
199 |         assert document.document_file.name
    |

backend/app/config/core/tests/test_models.py:199:9: S101 Use of `assert` detected
    |
197 |         # Check if document and file exist
198 |         assert Document.objects.filter(pk=document.document_id).exists()
199 |         assert document.document_file.name
    |         ^^^^^^ S101
200 |
201 |         # Clean up the saved file
    |

backend/app/config/core/tests/test_models.py:228:9: S101 Use of `assert` detected
    |
226 |         document.save()
227 |         updated_document = Document.objects.get(pk=document.pk)
228 |         assert updated_document.document_name == "Updated Name"
    |         ^^^^^^ S101
229 |         assert updated_document.document_type == "Updated Type"
    |

backend/app/config/core/tests/test_models.py:229:9: S101 Use of `assert` detected
    |
227 |         updated_document = Document.objects.get(pk=document.pk)
228 |         assert updated_document.document_name == "Updated Name"
229 |         assert updated_document.document_type == "Updated Type"
    |         ^^^^^^ S101
    |

backend/app/config/documents/apps.py:12:46: PGH004 Use specific rule codes when using `noqa`
   |
11 |     def ready(self) -> None:
12 |         import app.config.documents.signals  # noqa
   |                                              ^^^^^^ PGH004
   |

backend/app/config/documents/serializers.py:25:28: RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
   |
23 |           model = Document
24 |           fields = "__all__"
25 |           read_only_fields = [
   |  ____________________________^
26 | |             "created_date",
27 | |             "document_id",
28 | |             "updated_at",
29 | |             "created_by",
30 | |             "updated_by",
31 | |         ]
   | |_________^ RUF012
32 |           extra_kwargs = {
33 |               "created_by": {"default": serializers.CurrentUserDefault()},
   |

backend/app/config/documents/serializers.py:32:24: RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
   |
30 |               "updated_by",
31 |           ]
32 |           extra_kwargs = {
   |  ________________________^
33 | |             "created_by": {"default": serializers.CurrentUserDefault()},
34 | |             "updated_by": {"default": serializers.CurrentUserDefault()},
35 | |         }
   | |_________^ RUF012
36 |
37 |       def create(self, validated_data):
   |

backend/app/config/documents/serializers.py:37:9: ANN201 Missing return type annotation for public function `create`
   |
35 |         }
36 |
37 |     def create(self, validated_data):
   |         ^^^^^^ ANN201
38 |         request = self.context.get("request", None)
39 |         if request and request.user.is_authenticated:
   |
   = help: Add return type annotation

backend/app/config/documents/serializers.py:37:22: ANN001 Missing type annotation for function argument `validated_data`
   |
35 |         }
36 |
37 |     def create(self, validated_data):
   |                      ^^^^^^^^^^^^^^ ANN001
38 |         request = self.context.get("request", None)
39 |         if request and request.user.is_authenticated:
   |

backend/app/config/documents/serializers.py:51:9: ANN201 Missing return type annotation for public function `update`
   |
49 |         return document
50 |
51 |     def update(self, instance, validated_data):
   |         ^^^^^^ ANN201
52 |         request = self.context.get("request", None)
53 |         if request and request.user.is_authenticated:
   |
   = help: Add return type annotation

backend/app/config/documents/serializers.py:51:22: ANN001 Missing type annotation for function argument `instance`
   |
49 |         return document
50 |
51 |     def update(self, instance, validated_data):
   |                      ^^^^^^^^ ANN001
52 |         request = self.context.get("request", None)
53 |         if request and request.user.is_authenticated:
   |

backend/app/config/documents/serializers.py:51:32: ANN001 Missing type annotation for function argument `validated_data`
   |
49 |         return document
50 |
51 |     def update(self, instance, validated_data):
   |                                ^^^^^^^^^^^^^^ ANN001
52 |         request = self.context.get("request", None)
53 |         if request and request.user.is_authenticated:
   |

backend/app/config/documents/serializers.py:64:9: ANN201 Missing return type annotation for public function `to_representation`
   |
62 |         return instance
63 |
64 |     def to_representation(self, instance):
   |         ^^^^^^^^^^^^^^^^^ ANN201
65 |         representation = super().to_representation(instance)
66 |         if instance.document_file:
   |
   = help: Add return type annotation

backend/app/config/documents/serializers.py:64:33: ANN001 Missing type annotation for function argument `instance`
   |
62 |         return instance
63 |
64 |     def to_representation(self, instance):
   |                                 ^^^^^^^^ ANN001
65 |         representation = super().to_representation(instance)
66 |         if instance.document_file:
   |

backend/app/config/documents/signals.py:16:30: ANN001 Missing type annotation for function argument `sender`
   |
15 | @receiver(post_save, sender=Document)
16 | def trigger_dttot_processing(sender, instance, created, **kwargs) -> None:
   |                              ^^^^^^ ANN001
17 |     if created and instance.document_type == "DTTOT Document":
18 |         context = kwargs.get("context", {})
   |

backend/app/config/documents/signals.py:16:30: ARG001 Unused function argument: `sender`
   |
15 | @receiver(post_save, sender=Document)
16 | def trigger_dttot_processing(sender, instance, created, **kwargs) -> None:
   |                              ^^^^^^ ARG001
17 |     if created and instance.document_type == "DTTOT Document":
18 |         context = kwargs.get("context", {})
   |

backend/app/config/documents/signals.py:16:38: ANN001 Missing type annotation for function argument `instance`
   |
15 | @receiver(post_save, sender=Document)
16 | def trigger_dttot_processing(sender, instance, created, **kwargs) -> None:
   |                                      ^^^^^^^^ ANN001
17 |     if created and instance.document_type == "DTTOT Document":
18 |         context = kwargs.get("context", {})
   |

backend/app/config/documents/signals.py:16:48: ANN001 Missing type annotation for function argument `created`
   |
15 | @receiver(post_save, sender=Document)
16 | def trigger_dttot_processing(sender, instance, created, **kwargs) -> None:
   |                                                ^^^^^^^ ANN001
17 |     if created and instance.document_type == "DTTOT Document":
18 |         context = kwargs.get("context", {})
   |

backend/app/config/documents/signals.py:16:57: ANN003 Missing type annotation for `**kwargs`
   |
15 | @receiver(post_save, sender=Document)
16 | def trigger_dttot_processing(sender, instance, created, **kwargs) -> None:
   |                                                         ^^^^^^^^ ANN003
17 |     if created and instance.document_type == "DTTOT Document":
18 |         context = kwargs.get("context", {})
   |

backend/app/config/documents/signals.py:41:42: ANN001 Missing type annotation for function argument `sender`
   |
40 | @receiver(post_save, sender=Document)
41 | def trigger_dsb_user_personal_processing(sender, instance, created, **kwargs) -> None:
   |                                          ^^^^^^ ANN001
42 |     if created and instance.document_type == "DSB User Personal List Document":
43 |         context = kwargs.get("context", {})
   |

backend/app/config/documents/signals.py:41:42: ARG001 Unused function argument: `sender`
   |
40 | @receiver(post_save, sender=Document)
41 | def trigger_dsb_user_personal_processing(sender, instance, created, **kwargs) -> None:
   |                                          ^^^^^^ ARG001
42 |     if created and instance.document_type == "DSB User Personal List Document":
43 |         context = kwargs.get("context", {})
   |

backend/app/config/documents/signals.py:41:50: ANN001 Missing type annotation for function argument `instance`
   |
40 | @receiver(post_save, sender=Document)
41 | def trigger_dsb_user_personal_processing(sender, instance, created, **kwargs) -> None:
   |                                                  ^^^^^^^^ ANN001
42 |     if created and instance.document_type == "DSB User Personal List Document":
43 |         context = kwargs.get("context", {})
   |

backend/app/config/documents/signals.py:41:60: ANN001 Missing type annotation for function argument `created`
   |
40 | @receiver(post_save, sender=Document)
41 | def trigger_dsb_user_personal_processing(sender, instance, created, **kwargs) -> None:
   |                                                            ^^^^^^^ ANN001
42 |     if created and instance.document_type == "DSB User Personal List Document":
43 |         context = kwargs.get("context", {})
   |

backend/app/config/documents/signals.py:41:69: ANN003 Missing type annotation for `**kwargs`
   |
40 | @receiver(post_save, sender=Document)
41 | def trigger_dsb_user_personal_processing(sender, instance, created, **kwargs) -> None:
   |                                                                     ^^^^^^^^ ANN003
42 |     if created and instance.document_type == "DSB User Personal List Document":
43 |         context = kwargs.get("context", {})
   |

backend/app/config/documents/tests/test_document_api.py:21:5: ANN201 Missing return type annotation for public function `document_list_url`
   |
21 | def document_list_url():
   |     ^^^^^^^^^^^^^^^^^ ANN201
22 |     return reverse("documents:document-list")
   |
   = help: Add return type annotation

backend/app/config/documents/tests/test_document_api.py:25:5: ANN201 Missing return type annotation for public function `document_detail_url`
   |
25 | def document_detail_url(document_id):
   |     ^^^^^^^^^^^^^^^^^^^ ANN201
26 |     return reverse("documents:document-details", args=[document_id])
   |
   = help: Add return type annotation

backend/app/config/documents/tests/test_document_api.py:25:25: ANN001 Missing type annotation for function argument `document_id`
   |
25 | def document_detail_url(document_id):
   |                         ^^^^^^^^^^^ ANN001
26 |     return reverse("documents:document-details", args=[document_id])
   |

backend/app/config/documents/tests/test_document_api.py:36:32: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
   |
35 |         # Create 'test_media' subdirectory within MEDIA_ROOT for test files
36 |         self.test_media_path = os.path.join(settings.MEDIA_ROOT, "test_media")
   |                                ^^^^^^^^^^^^ PTH118
37 |         os.makedirs(self.test_media_path, exist_ok=True)
   |

backend/app/config/documents/tests/test_document_api.py:37:9: PTH103 `os.makedirs()` should be replaced by `Path.mkdir(parents=True)`
   |
35 |         # Create 'test_media' subdirectory within MEDIA_ROOT for test files
36 |         self.test_media_path = os.path.join(settings.MEDIA_ROOT, "test_media")
37 |         os.makedirs(self.test_media_path, exist_ok=True)
   |         ^^^^^^^^^^^ PTH103
38 |
39 |         # Override MEDIA_ROOT to the test directory
   |

backend/app/config/documents/tests/test_document_api.py:69:9: S101 Use of `assert` detected
   |
67 |         }
68 |         res = self.client.post(document_list_url(), payload, format="multipart")
69 |         assert res.status_code == status.HTTP_201_CREATED
   |         ^^^^^^ S101
70 |         document = Document.objects.get(pk=res.data["document_id"])
71 |         for key in payload:
   |

backend/app/config/documents/tests/test_document_api.py:73:17: S101 Use of `assert` detected
   |
71 |         for key in payload:
72 |             if key != "document_file":
73 |                 assert payload[key] == getattr(document, key)
   |                 ^^^^^^ S101
74 |         assert document.document_file
   |

backend/app/config/documents/tests/test_document_api.py:74:9: S101 Use of `assert` detected
   |
72 |             if key != "document_file":
73 |                 assert payload[key] == getattr(document, key)
74 |         assert document.document_file
   |         ^^^^^^ S101
75 |
76 |         # Call save_file_to_instance and document.save
   |

backend/app/config/documents/tests/test_document_api.py:82:9: S101 Use of `assert` detected
   |
80 |         # Verify that the file has been saved correctly
81 |         file_path = document.document_file.path
82 |         assert os.path.exists(file_path)
   |         ^^^^^^ S101
83 |
84 |         # Clean up the saved file
   |

backend/app/config/documents/tests/test_document_api.py:82:16: PTH110 `os.path.exists()` should be replaced by `Path.exists()`
   |
80 |         # Verify that the file has been saved correctly
81 |         file_path = document.document_file.path
82 |         assert os.path.exists(file_path)
   |                ^^^^^^^^^^^^^^ PTH110
83 |
84 |         # Clean up the saved file
   |

backend/app/config/documents/tests/test_document_api.py:104:9: S101 Use of `assert` detected
    |
103 |         res = self.client.get(document_list_url())
104 |         assert res.status_code == status.HTTP_200_OK
    |         ^^^^^^ S101
105 |         assert len(res.data) == 2
    |

backend/app/config/documents/tests/test_document_api.py:105:9: S101 Use of `assert` detected
    |
103 |         res = self.client.get(document_list_url())
104 |         assert res.status_code == status.HTTP_200_OK
105 |         assert len(res.data) == 2
    |         ^^^^^^ S101
106 |
107 |     def test_retrieve_document_detail(self) -> None:
    |

backend/app/config/documents/tests/test_document_api.py:105:33: PLR2004 Magic value used in comparison, consider replacing `2` with a constant variable
    |
103 |         res = self.client.get(document_list_url())
104 |         assert res.status_code == status.HTTP_200_OK
105 |         assert len(res.data) == 2
    |                                 ^ PLR2004
106 |
107 |     def test_retrieve_document_detail(self) -> None:
    |

backend/app/config/documents/tests/test_document_api.py:119:9: S101 Use of `assert` detected
    |
117 |         url = document_detail_url(document.document_id)
118 |         res = self.client.get(url)
119 |         assert res.status_code == status.HTTP_200_OK
    |         ^^^^^^ S101
120 |         assert res.data["document_name"] == document.document_name
    |

backend/app/config/documents/tests/test_document_api.py:120:9: S101 Use of `assert` detected
    |
118 |         res = self.client.get(url)
119 |         assert res.status_code == status.HTTP_200_OK
120 |         assert res.data["document_name"] == document.document_name
    |         ^^^^^^ S101
121 |
122 |     def test_update_document(self) -> None:
    |

backend/app/config/documents/tests/test_document_api.py:137:9: S101 Use of `assert` detected
    |
136 |         document.refresh_from_db()
137 |         assert res.status_code == status.HTTP_200_OK
    |         ^^^^^^ S101
138 |         assert document.document_name == payload["document_name"]
139 |         assert document.document_type == payload["document_type"]
    |

backend/app/config/documents/tests/test_document_api.py:138:9: S101 Use of `assert` detected
    |
136 |         document.refresh_from_db()
137 |         assert res.status_code == status.HTTP_200_OK
138 |         assert document.document_name == payload["document_name"]
    |         ^^^^^^ S101
139 |         assert document.document_type == payload["document_type"]
    |

backend/app/config/documents/tests/test_document_api.py:139:9: S101 Use of `assert` detected
    |
137 |         assert res.status_code == status.HTTP_200_OK
138 |         assert document.document_name == payload["document_name"]
139 |         assert document.document_type == payload["document_type"]
    |         ^^^^^^ S101
140 |
141 |     def test_delete_document(self) -> None:
    |

backend/app/config/documents/tests/test_document_api.py:154:9: S101 Use of `assert` detected
    |
152 |         res = self.client.delete(url)
153 |
154 |         assert res.status_code == status.HTTP_204_NO_CONTENT
    |         ^^^^^^ S101
155 |         assert not Document.objects.filter(pk=document.pk).exists()
    |

backend/app/config/documents/tests/test_document_api.py:155:9: S101 Use of `assert` detected
    |
154 |         assert res.status_code == status.HTTP_204_NO_CONTENT
155 |         assert not Document.objects.filter(pk=document.pk).exists()
    |         ^^^^^^ S101
    |

backend/app/config/documents/tests/test_document_api.py:176:32: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
    |
174 |         # Create 'test_media' subdirectory within MEDIA_ROOT for test files
175 |         self.test_media_subdir = "test_media"
176 |         self.test_media_path = os.path.join(settings.MEDIA_ROOT, "test_media")
    |                                ^^^^^^^^^^^^ PTH118
177 |         os.makedirs(self.test_media_path, exist_ok=True)
    |

backend/app/config/documents/tests/test_document_api.py:177:9: PTH103 `os.makedirs()` should be replaced by `Path.mkdir(parents=True)`
    |
175 |         self.test_media_subdir = "test_media"
176 |         self.test_media_path = os.path.join(settings.MEDIA_ROOT, "test_media")
177 |         os.makedirs(self.test_media_path, exist_ok=True)
    |         ^^^^^^^^^^^ PTH103
178 |
179 |         # Override MEDIA_ROOT to the test directory
    |

backend/app/config/documents/tests/test_document_api.py:192:9: ANN205 Missing return type annotation for staticmethod `create_test_document_file`
    |
191 |     @staticmethod
192 |     def create_test_document_file():
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^ ANN205
193 |         # Create an XLSX file in memory
194 |         output = io.BytesIO()
    |
    = help: Add return type annotation

backend/app/config/documents/tests/test_document_api.py:230:9: D205 1 blank line required between summary line and description
    |
229 |       def test_upload_dttot_document_and_process(self) -> None:
230 |           """Test the upload and processing of a DTTOT Document
    |  _________^
231 | |         and its saving into the dttotDoc model.
232 | |         """
    | |___________^ D205
233 |           document_file = self.create_test_document_file()
234 |           with self.settings(MEDIA_ROOT=self.test_media_path):
    |
    = help: Insert single blank line

backend/app/config/documents/tests/test_document_api.py:245:13: S101 Use of `assert` detected
    |
243 |                 format="multipart",
244 |             )
245 |             assert response.status_code == status.HTTP_201_CREATED, "Document upload failed"
    |             ^^^^^^ S101
246 |
247 |             # Get document ID from response
    |

backend/app/config/documents/tests/test_document_api.py:249:13: S101 Use of `assert` detected
    |
247 |             # Get document ID from response
248 |             document_id = response.data["document_id"]
249 |             assert document_id is not None, "Document ID was not returned"
    |             ^^^^^^ S101
    |

backend/app/config/documents/tests/test_document_api.py:270:32: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
    |
268 |         # Create 'test_media' subdirectory within MEDIA_ROOT for test files
269 |         self.test_media_subdir = "test_media"
270 |         self.test_media_path = os.path.join(settings.MEDIA_ROOT, "test_media")
    |                                ^^^^^^^^^^^^ PTH118
271 |         os.makedirs(self.test_media_path, exist_ok=True)
    |

backend/app/config/documents/tests/test_document_api.py:271:9: PTH103 `os.makedirs()` should be replaced by `Path.mkdir(parents=True)`
    |
269 |         self.test_media_subdir = "test_media"
270 |         self.test_media_path = os.path.join(settings.MEDIA_ROOT, "test_media")
271 |         os.makedirs(self.test_media_path, exist_ok=True)
    |         ^^^^^^^^^^^ PTH103
272 |
273 |         # Override MEDIA_ROOT to the test directory
    |

backend/app/config/documents/tests/test_document_api.py:286:9: ANN205 Missing return type annotation for staticmethod `create_test_document_file`
    |
285 |     @staticmethod
286 |     def create_test_document_file():
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^ ANN205
287 |         # Create an XLSX file in memory
288 |         output = io.BytesIO()
    |
    = help: Add return type annotation

backend/app/config/documents/tests/test_document_api.py:336:13: S101 Use of `assert` detected
    |
334 |                 format="multipart",
335 |             )
336 |             assert response.status_code == status.HTTP_201_CREATED, "Document upload failed"
    |             ^^^^^^ S101
337 |             document_id = response.data["document_id"]
338 |             assert document_id is not None, "Document ID was not returned"
    |

backend/app/config/documents/tests/test_document_api.py:338:13: S101 Use of `assert` detected
    |
336 |             assert response.status_code == status.HTTP_201_CREATED, "Document upload failed"
337 |             document_id = response.data["document_id"]
338 |             assert document_id is not None, "Document ID was not returned"
    |             ^^^^^^ S101
339 |
340 |             instance = Document.objects.get(pk=document_id)
    |

backend/app/config/documents/tests/test_document_api.py:344:13: S101 Use of `assert` detected
    |
342 |             instance.save()
343 |
344 |             assert Document.objects.filter(pk=document_id).exists(), "Document was not created in the database."
    |             ^^^^^^ S101
345 |             file_path = instance.document_file.path
346 |             assert os.path.exists(file_path)
    |

backend/app/config/documents/tests/test_document_api.py:346:13: S101 Use of `assert` detected
    |
344 |             assert Document.objects.filter(pk=document_id).exists(), "Document was not created in the database."
345 |             file_path = instance.document_file.path
346 |             assert os.path.exists(file_path)
    |             ^^^^^^ S101
347 |             instance.document_file.delete()
    |

backend/app/config/documents/tests/test_document_api.py:346:20: PTH110 `os.path.exists()` should be replaced by `Path.exists()`
    |
344 |             assert Document.objects.filter(pk=document_id).exists(), "Document was not created in the database."
345 |             file_path = instance.document_file.path
346 |             assert os.path.exists(file_path)
    |                    ^^^^^^^^^^^^^^ PTH110
347 |             instance.document_file.delete()
    |

backend/app/config/documents/utils/data_preparation.py:10:9: ANN201 Missing return type annotation for public function `import_document`
   |
 9 | class DTTOTDocumentProcessing:
10 |     def import_document(self, file_path, document_format):
   |         ^^^^^^^^^^^^^^^ ANN201
11 |         """Imports a document based on its format and returns a pandas DataFrame.
   |
   = help: Add return type annotation

backend/app/config/documents/utils/data_preparation.py:10:31: ANN001 Missing type annotation for function argument `file_path`
   |
 9 | class DTTOTDocumentProcessing:
10 |     def import_document(self, file_path, document_format):
   |                               ^^^^^^^^^ ANN001
11 |         """Imports a document based on its format and returns a pandas DataFrame.
   |

backend/app/config/documents/utils/data_preparation.py:10:42: ANN001 Missing type annotation for function argument `document_format`
   |
 9 | class DTTOTDocumentProcessing:
10 |     def import_document(self, file_path, document_format):
   |                                          ^^^^^^^^^^^^^^^ ANN001
11 |         """Imports a document based on its format and returns a pandas DataFrame.
   |

backend/app/config/documents/utils/data_preparation.py:11:9: D401 First line of docstring should be in imperative mood: "Imports a document based on its format and returns a pandas DataFrame."
   |
 9 |   class DTTOTDocumentProcessing:
10 |       def import_document(self, file_path, document_format):
11 |           """Imports a document based on its format and returns a pandas DataFrame.
   |  _________^
12 | |
13 | |         Args:
14 | |         ----
15 | |             file_path (str): The path to the document file.
16 | |             document_format (str): The format of the document ('CSV', 'XLS', or 'XLSX').
17 | |
18 | |         Returns:
19 | |         -------
20 | |             DataFrame: The imported document as a pandas DataFrame.
21 | |
22 | |         """
   | |___________^ D401
23 |           try:
24 |               if document_format == "CSV":
   |

backend/app/config/documents/utils/data_preparation.py:26:13: RET505 Unnecessary `elif` after `return` statement
   |
24 |             if document_format == "CSV":
25 |                 return pd.read_csv(file_path)
26 |             elif document_format == "XLS":
   |             ^^^^ RET505
27 |                 return pd.read_excel(file_path, engine="xlrd")
28 |             elif document_format == "XLSX":
   |
   = help: Remove unnecessary `elif`

backend/app/config/documents/utils/data_preparation.py:37:9: ANN201 Missing return type annotation for public function `retrieve_data_as_dataframe`
   |
35 |             raise ValueError(msg) from e
36 |
37 |     def retrieve_data_as_dataframe(self, file_path, document_format):
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ ANN201
38 |         """Wrapper function to retrieve all data from a document into a pandas DataFrame.
   |
   = help: Add return type annotation

backend/app/config/documents/utils/data_preparation.py:37:42: ANN001 Missing type annotation for function argument `file_path`
   |
35 |             raise ValueError(msg) from e
36 |
37 |     def retrieve_data_as_dataframe(self, file_path, document_format):
   |                                          ^^^^^^^^^ ANN001
38 |         """Wrapper function to retrieve all data from a document into a pandas DataFrame.
   |

backend/app/config/documents/utils/data_preparation.py:37:53: ANN001 Missing type annotation for function argument `document_format`
   |
35 |             raise ValueError(msg) from e
36 |
37 |     def retrieve_data_as_dataframe(self, file_path, document_format):
   |                                                     ^^^^^^^^^^^^^^^ ANN001
38 |         """Wrapper function to retrieve all data from a document into a pandas DataFrame.
   |

backend/app/config/documents/utils/data_preparation.py:38:9: D401 First line of docstring should be in imperative mood: "Wrapper function to retrieve all data from a document into a pandas DataFrame."
   |
37 |       def retrieve_data_as_dataframe(self, file_path, document_format):
38 |           """Wrapper function to retrieve all data from a document into a pandas DataFrame.
   |  _________^
39 | |
40 | |         Args:
41 | |         ----
42 | |             file_path (str): The path to the document file.
43 | |             document_format (str): The format of the document ('CSV', 'XLS', or 'XLSX').
44 | |
45 | |         Returns:
46 | |         -------
47 | |             DataFrame: The document data as a pandas DataFrame.
48 | |
49 | |         """
   | |___________^ D401
50 |           return self.import_document(file_path, document_format)
   |

backend/app/config/documents/utils/data_preparation.py:53:9: ANN205 Missing return type annotation for staticmethod `split_name`
   |
52 |     @staticmethod
53 |     def split_name(name):
   |         ^^^^^^^^^^ ANN205
54 |         """Splits a name into first, middle, and last components."""
55 |         if not isinstance(name, str):
   |
   = help: Add return type annotation

backend/app/config/documents/utils/data_preparation.py:53:20: ANN001 Missing type annotation for function argument `name`
   |
52 |     @staticmethod
53 |     def split_name(name):
   |                    ^^^^ ANN001
54 |         """Splits a name into first, middle, and last components."""
55 |         if not isinstance(name, str):
   |

backend/app/config/documents/utils/data_preparation.py:54:9: D401 First line of docstring should be in imperative mood: "Splits a name into first, middle, and last components."
   |
52 |     @staticmethod
53 |     def split_name(name):
54 |         """Splits a name into first, middle, and last components."""
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D401
55 |         if not isinstance(name, str):
56 |             return "", "", ""
   |

backend/app/config/documents/utils/data_preparation.py:58:26: PLR2004 Magic value used in comparison, consider replacing `3` with a constant variable
   |
56 |             return "", "", ""
57 |         parts = name.strip().split()
58 |         if len(parts) >= 3:
   |                          ^ PLR2004
59 |             return parts[0], " ".join(parts[1:-1]), parts[-1]
60 |         elif len(parts) == 2:
   |

backend/app/config/documents/utils/data_preparation.py:60:9: RET505 Unnecessary `elif` after `return` statement
   |
58 |         if len(parts) >= 3:
59 |             return parts[0], " ".join(parts[1:-1]), parts[-1]
60 |         elif len(parts) == 2:
   |         ^^^^ RET505
61 |             return parts[0], "", parts[1]
62 |         elif len(parts) == 1:
   |
   = help: Remove unnecessary `elif`

backend/app/config/documents/utils/data_preparation.py:60:28: PLR2004 Magic value used in comparison, consider replacing `2` with a constant variable
   |
58 |         if len(parts) >= 3:
59 |             return parts[0], " ".join(parts[1:-1]), parts[-1]
60 |         elif len(parts) == 2:
   |                            ^ PLR2004
61 |             return parts[0], "", parts[1]
62 |         elif len(parts) == 1:
   |

backend/app/config/documents/utils/data_preparation.py:66:9: ANN201 Missing return type annotation for public function `split_aliases`
   |
64 |         return "", "", ""
65 |
66 |     def split_aliases(self, name, case_insensitive=True):
   |         ^^^^^^^^^^^^^ ANN201
67 |         if case_insensitive:
68 |             name = name.lower()
   |
   = help: Add return type annotation

backend/app/config/documents/utils/data_preparation.py:66:29: ANN001 Missing type annotation for function argument `name`
   |
64 |         return "", "", ""
65 |
66 |     def split_aliases(self, name, case_insensitive=True):
   |                             ^^^^ ANN001
67 |         if case_insensitive:
68 |             name = name.lower()
   |

backend/app/config/documents/utils/data_preparation.py:66:35: FBT002 Boolean default positional argument in function definition
   |
64 |         return "", "", ""
65 |
66 |     def split_aliases(self, name, case_insensitive=True):
   |                                   ^^^^^^^^^^^^^^^^ FBT002
67 |         if case_insensitive:
68 |             name = name.lower()
   |

backend/app/config/documents/utils/data_preparation.py:66:35: ANN001 Missing type annotation for function argument `case_insensitive`
   |
64 |         return "", "", ""
65 |
66 |     def split_aliases(self, name, case_insensitive=True):
   |                                   ^^^^^^^^^^^^^^^^ ANN001
67 |         if case_insensitive:
68 |             name = name.lower()
   |

backend/app/config/documents/utils/data_preparation.py:70:9: RET505 Unnecessary `else` after `return` statement
   |
68 |             name = name.lower()
69 |             return name.split(" alias ")[1:] if " alias " in name else []
70 |         else:
   |         ^^^^ RET505
71 |             parts = name.split(" Alias ")
72 |             aliases = parts[1:] if len(parts) > 1 else []
   |
   = help: Remove unnecessary `else`

backend/app/config/documents/utils/data_preparation.py:78:9: ANN201 Missing return type annotation for public function `extract_and_split_names`
   |
76 |             return aliases
77 |
78 |     def extract_and_split_names(self, df, name_column, case_insensitive=False):
   |         ^^^^^^^^^^^^^^^^^^^^^^^ ANN201
79 |         """Extracts full names and aliases from a specified column in a DataFrame,
80 |         then splits these names into first, middle, and last names.
   |
   = help: Add return type annotation

backend/app/config/documents/utils/data_preparation.py:78:39: ANN001 Missing type annotation for function argument `df`
   |
76 |             return aliases
77 |
78 |     def extract_and_split_names(self, df, name_column, case_insensitive=False):
   |                                       ^^ ANN001
79 |         """Extracts full names and aliases from a specified column in a DataFrame,
80 |         then splits these names into first, middle, and last names.
   |

backend/app/config/documents/utils/data_preparation.py:78:43: ANN001 Missing type annotation for function argument `name_column`
   |
76 |             return aliases
77 |
78 |     def extract_and_split_names(self, df, name_column, case_insensitive=False):
   |                                           ^^^^^^^^^^^ ANN001
79 |         """Extracts full names and aliases from a specified column in a DataFrame,
80 |         then splits these names into first, middle, and last names.
   |

backend/app/config/documents/utils/data_preparation.py:78:56: FBT002 Boolean default positional argument in function definition
   |
76 |             return aliases
77 |
78 |     def extract_and_split_names(self, df, name_column, case_insensitive=False):
   |                                                        ^^^^^^^^^^^^^^^^ FBT002
79 |         """Extracts full names and aliases from a specified column in a DataFrame,
80 |         then splits these names into first, middle, and last names.
   |

backend/app/config/documents/utils/data_preparation.py:78:56: ANN001 Missing type annotation for function argument `case_insensitive`
   |
76 |             return aliases
77 |
78 |     def extract_and_split_names(self, df, name_column, case_insensitive=False):
   |                                                        ^^^^^^^^^^^^^^^^ ANN001
79 |         """Extracts full names and aliases from a specified column in a DataFrame,
80 |         then splits these names into first, middle, and last names.
   |

backend/app/config/documents/utils/data_preparation.py:79:9: D205 1 blank line required between summary line and description
   |
78 |       def extract_and_split_names(self, df, name_column, case_insensitive=False):
79 |           """Extracts full names and aliases from a specified column in a DataFrame,
   |  _________^
80 | |         then splits these names into first, middle, and last names.
81 | |         Adds new columns for each component of the name and its aliases.
82 | |
83 | |         Args:
84 | |         ----
85 | |             df (DataFrame): The DataFrame containing the names.
86 | |             name_column (str): The column containing the names from which to extract aliases.
87 | |             case_insensitive (bool): Whether to process names in a case-insensitive manner.
88 | |
89 | |         Returns:
90 | |         -------
91 | |             DataFrame: The DataFrame with additional columns for name components.
92 | |
93 | |         """
   | |___________^ D205
94 |
95 |           def split_name(name):
   |
   = help: Insert single blank line

backend/app/config/documents/utils/data_preparation.py:79:9: D401 First line of docstring should be in imperative mood: "Extracts full names and aliases from a specified column in a DataFrame,"
   |
78 |       def extract_and_split_names(self, df, name_column, case_insensitive=False):
79 |           """Extracts full names and aliases from a specified column in a DataFrame,
   |  _________^
80 | |         then splits these names into first, middle, and last names.
81 | |         Adds new columns for each component of the name and its aliases.
82 | |
83 | |         Args:
84 | |         ----
85 | |             df (DataFrame): The DataFrame containing the names.
86 | |             name_column (str): The column containing the names from which to extract aliases.
87 | |             case_insensitive (bool): Whether to process names in a case-insensitive manner.
88 | |
89 | |         Returns:
90 | |         -------
91 | |             DataFrame: The DataFrame with additional columns for name components.
92 | |
93 | |         """
   | |___________^ D401
94 |
95 |           def split_name(name):
   |

backend/app/config/documents/utils/data_preparation.py:95:13: ANN202 Missing return type annotation for private function `split_name`
   |
93 |         """
94 |
95 |         def split_name(name):
   |             ^^^^^^^^^^ ANN202
96 |             if not isinstance(name, str):
97 |                 return "", "", ""
   |
   = help: Add return type annotation

backend/app/config/documents/utils/data_preparation.py:95:24: ANN001 Missing type annotation for function argument `name`
   |
93 |         """
94 |
95 |         def split_name(name):
   |                        ^^^^ ANN001
96 |             if not isinstance(name, str):
97 |                 return "", "", ""
   |

backend/app/config/documents/utils/data_preparation.py:99:30: PLR2004 Magic value used in comparison, consider replacing `3` with a constant variable
    |
 97 |                 return "", "", ""
 98 |             parts = name.strip().split()
 99 |             if len(parts) >= 3:
    |                              ^ PLR2004
100 |                 return parts[0], " ".join(parts[1:-1]), parts[-1]
101 |             elif len(parts) == 2:
    |

backend/app/config/documents/utils/data_preparation.py:101:13: RET505 Unnecessary `elif` after `return` statement
    |
 99 |             if len(parts) >= 3:
100 |                 return parts[0], " ".join(parts[1:-1]), parts[-1]
101 |             elif len(parts) == 2:
    |             ^^^^ RET505
102 |                 return parts[0], "", parts[1]
103 |             elif len(parts) == 1:
    |
    = help: Remove unnecessary `elif`

backend/app/config/documents/utils/data_preparation.py:101:32: PLR2004 Magic value used in comparison, consider replacing `2` with a constant variable
    |
 99 |             if len(parts) >= 3:
100 |                 return parts[0], " ".join(parts[1:-1]), parts[-1]
101 |             elif len(parts) == 2:
    |                                ^ PLR2004
102 |                 return parts[0], "", parts[1]
103 |             elif len(parts) == 1:
    |

backend/app/config/documents/utils/data_preparation.py:107:13: ANN202 Missing return type annotation for private function `split_aliases`
    |
105 |             return "", "", ""
106 |
107 |         def split_aliases(name):
    |             ^^^^^^^^^^^^^ ANN202
108 |             if case_insensitive:
109 |                 name = name.lower()
    |
    = help: Add return type annotation

backend/app/config/documents/utils/data_preparation.py:107:27: ANN001 Missing type annotation for function argument `name`
    |
105 |             return "", "", ""
106 |
107 |         def split_aliases(name):
    |                           ^^^^ ANN001
108 |             if case_insensitive:
109 |                 name = name.lower()
    |

backend/app/config/documents/utils/data_preparation.py:111:13: RET505 Unnecessary `else` after `return` statement
    |
109 |                 name = name.lower()
110 |                 return name.split(" alias ")[1:] if " alias " in name else []
111 |             else:
    |             ^^^^ RET505
112 |                 parts = name.split(" Alias ")
113 |                 aliases = parts[1:] if len(parts) > 1 else []
    |
    = help: Remove unnecessary `else`

backend/app/config/documents/utils/data_preparation.py:121:23: B034 `re.split` should pass `maxsplit` and `flags` as keyword arguments to avoid confusion due to unintuitive argument positions
    |
119 |         # Initialize the full name column
120 |         df["full_name"] = df[name_column].apply(
121 |             lambda x: re.split(" (?i)alias ", x, 1)[0] if isinstance(x, str) else "",
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B034
122 |         )
    |

backend/app/config/documents/utils/data_preparation.py:139:41: B023 Function definition does not bind loop variable `i`
    |
137 |             alias_col = f"Alias_name_{i+1}"
138 |             df[alias_col] = df["aliases"].apply(
139 |                 lambda aliases: aliases[i] if len(aliases) > i else "",
    |                                         ^ B023
140 |             )
141 |             df[
    |

backend/app/config/documents/utils/data_preparation.py:139:62: B023 Function definition does not bind loop variable `i`
    |
137 |             alias_col = f"Alias_name_{i+1}"
138 |             df[alias_col] = df["aliases"].apply(
139 |                 lambda aliases: aliases[i] if len(aliases) > i else "",
    |                                                              ^ B023
140 |             )
141 |             df[
    |

backend/app/config/documents/utils/data_preparation.py:169:10: PGH004 Use specific rule codes when using `noqa`
    |
167 |                                        letters followed by six or more digits, with an
168 |                                        optional space between letters and digits.
169 |     """  # noqa
    |          ^^^^^^ PGH004
170 |
171 |     def __init__(self) -> None:
    |

backend/app/config/documents/utils/data_preparation.py:175:14: PGH004 Use specific rule codes when using `noqa`
    |
173 |         Initializes the ExtractNIKandPassportNumber class with specific regex patterns
174 |         for identifying NIK and passport numbers within text.
175 |         """  # noqa
    |              ^^^^^^ PGH004
176 |         self.nik_regex = re.compile(
177 |             r"(\b\d{16}\b)",
    |

backend/app/config/documents/utils/data_preparation.py:183:9: ANN201 Missing return type annotation for public function `extract_nik_and_passport_number`
    |
181 |         )  # Pattern for passport numbers with a capture group
182 |
183 |     def extract_nik_and_passport_number(self, df):
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ANN201
184 |         """
185 |         Extracts NIK and passport numbers from the specified description columns
    |
    = help: Add return type annotation

backend/app/config/documents/utils/data_preparation.py:183:47: ANN001 Missing type annotation for function argument `df`
    |
181 |         )  # Pattern for passport numbers with a capture group
182 |
183 |     def extract_nik_and_passport_number(self, df):
    |                                               ^^ ANN001
184 |         """
185 |         Extracts NIK and passport numbers from the specified description columns
    |

backend/app/config/documents/utils/data_preparation.py:194:14: PGH004 Use specific rule codes when using `noqa`
    |
192 |             pd.DataFrame: The modified DataFrame with NIK and passport numbers extracted
193 |                           and description texts cleaned.
194 |         """  # noqa
    |              ^^^^^^ PGH004
195 |         # Ensure all description columns
196 |         # are strings and fill NaN with empty strings
    |

backend/app/config/documents/utils/data_preparation.py:228:9: ANN202 Missing return type annotation for private function `_detect_description_columns`
    |
226 |         return df
227 |
228 |     def _detect_description_columns(self, df):
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ ANN202
229 |         """Identifies columns within the DataFrame that likely contain descriptive
230 |         texts for extracting NIK and passport numbers.
    |
    = help: Add return type annotation

backend/app/config/documents/utils/data_preparation.py:228:43: ANN001 Missing type annotation for function argument `df`
    |
226 |         return df
227 |
228 |     def _detect_description_columns(self, df):
    |                                           ^^ ANN001
229 |         """Identifies columns within the DataFrame that likely contain descriptive
230 |         texts for extracting NIK and passport numbers.
    |

backend/app/config/documents/utils/data_preparation.py:229:9: D205 1 blank line required between summary line and description
    |
228 |       def _detect_description_columns(self, df):
229 |           """Identifies columns within the DataFrame that likely contain descriptive
    |  _________^
230 | |         texts for extracting NIK and passport numbers.
231 | |         """
    | |___________^ D205
232 |           return [col for col in df.columns if "description" in col.lower()]
    |
    = help: Insert single blank line

backend/app/config/documents/utils/data_preparation.py:229:9: D401 First line of docstring should be in imperative mood: "Identifies columns within the DataFrame that likely contain descriptive"
    |
228 |       def _detect_description_columns(self, df):
229 |           """Identifies columns within the DataFrame that likely contain descriptive
    |  _________^
230 | |         texts for extracting NIK and passport numbers.
231 | |         """
    | |___________^ D401
232 |           return [col for col in df.columns if "description" in col.lower()]
    |

backend/app/config/documents/utils/data_preparation.py:234:9: ANN202 Missing return type annotation for private function `_clean_description`
    |
232 |         return [col for col in df.columns if "description" in col.lower()]
233 |
234 |     def _clean_description(self, text):
    |         ^^^^^^^^^^^^^^^^^^ ANN202
235 |         """Cleans the description text
236 |         by removing detected NIK and passport numbers.
    |
    = help: Add return type annotation

backend/app/config/documents/utils/data_preparation.py:234:34: ANN001 Missing type annotation for function argument `text`
    |
232 |         return [col for col in df.columns if "description" in col.lower()]
233 |
234 |     def _clean_description(self, text):
    |                                  ^^^^ ANN001
235 |         """Cleans the description text
236 |         by removing detected NIK and passport numbers.
    |

backend/app/config/documents/utils/data_preparation.py:235:9: D205 1 blank line required between summary line and description
    |
234 |       def _clean_description(self, text):
235 |           """Cleans the description text
    |  _________^
236 | |         by removing detected NIK and passport numbers.
237 | |         """
    | |___________^ D205
238 |           text = self.nik_regex.sub("", text)
239 |           text = self.passport_regex.sub("", text)
    |
    = help: Insert single blank line

backend/app/config/documents/utils/data_preparation.py:235:9: D401 First line of docstring should be in imperative mood: "Cleans the description text"
    |
234 |       def _clean_description(self, text):
235 |           """Cleans the description text
    |  _________^
236 | |         by removing detected NIK and passport numbers.
237 | |         """
    | |___________^ D401
238 |           text = self.nik_regex.sub("", text)
239 |           text = self.passport_regex.sub("", text)
    |

backend/app/config/documents/utils/data_preparation.py:247:10: PGH004 Use specific rule codes when using `noqa`
    |
245 |     Class for dynamically separating the 'Deskripsi' column of a DataFrame into multiple
246 |     'description_{seqNumber}' columns based on the content of bullet points or numbered items.
247 |     """  # noqa
    |          ^^^^^^ PGH004
248 |
249 |     def __init__(self) -> None:
    |

backend/app/config/documents/utils/data_preparation.py:250:9: D401 First line of docstring should be in imperative mood: "Initializes the CleaningSeparatingDeskripsi instance."
    |
249 |     def __init__(self) -> None:
250 |         """Initializes the CleaningSeparatingDeskripsi instance."""
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D401
251 |         self.split_regex = r"\n\s*(?:-\s+|\d+\.\s+|\*\s+)?(?=[^;\.,]*[;\.,]?\s*(?:-\s+|\d+\.\s+|\*\s+|$))"
    |

backend/app/config/documents/utils/data_preparation.py:253:9: ANN201 Missing return type annotation for public function `separating_cleaning_deskripsi`
    |
251 |         self.split_regex = r"\n\s*(?:-\s+|\d+\.\s+|\*\s+)?(?=[^;\.,]*[;\.,]?\s*(?:-\s+|\d+\.\s+|\*\s+|$))"
252 |
253 |     def separating_cleaning_deskripsi(self, df):
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ANN201
254 |         """Separates bullet points or numbered items in the 'Deskripsi' column
255 |         into individual 'description_{seqNumber}' columns
    |
    = help: Add return type annotation

backend/app/config/documents/utils/data_preparation.py:253:45: ANN001 Missing type annotation for function argument `df`
    |
251 |         self.split_regex = r"\n\s*(?:-\s+|\d+\.\s+|\*\s+)?(?=[^;\.,]*[;\.,]?\s*(?:-\s+|\d+\.\s+|\*\s+|$))"
252 |
253 |     def separating_cleaning_deskripsi(self, df):
    |                                             ^^ ANN001
254 |         """Separates bullet points or numbered items in the 'Deskripsi' column
255 |         into individual 'description_{seqNumber}' columns
    |

backend/app/config/documents/utils/data_preparation.py:254:9: D205 1 blank line required between summary line and description
    |
253 |       def separating_cleaning_deskripsi(self, df):
254 |           """Separates bullet points or numbered items in the 'Deskripsi' column
    |  _________^
255 | |         into individual 'description_{seqNumber}' columns
256 | |         based on the maximum count of items found in the column.
257 | |         Removes the original 'Deskripsi' column afterward.
258 | |
259 | |         Args:
260 | |         ----
261 | |             df (pd.DataFrame): The input DataFrame with a 'Deskripsi' column.
262 | |
263 | |         Returns:
264 | |         -------
265 | |             pd.DataFrame: The processed DataFrame
266 | |             with separated description columns.
267 | |
268 | |         """
    | |___________^ D205
269 |           df["Deskripsi"] = df["Deskripsi"].fillna("").astype(str)
270 |           max_items = self._find_max_descriptions(df["Deskripsi"])
    |
    = help: Insert single blank line

backend/app/config/documents/utils/data_preparation.py:280:21: PD008 Use `.loc` instead of `.at`. If speed is important, use NumPy.
    |
278 |             for i, desc in enumerate(descriptions):
279 |                 if i < max_items:
280 |                     df.at[index, f"description_{i+1}"] = desc
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PD008
281 |
282 |         return df.drop(columns=["Deskripsi"])
    |

backend/app/config/documents/utils/data_preparation.py:284:9: ANN202 Missing return type annotation for private function `_find_max_descriptions`
    |
282 |         return df.drop(columns=["Deskripsi"])
283 |
284 |     def _find_max_descriptions(self, descriptions):
    |         ^^^^^^^^^^^^^^^^^^^^^^ ANN202
285 |         """
286 |         Finds the maximum number of bullet points or numbered items in the 'Deskripsi' column.
    |
    = help: Add return type annotation

backend/app/config/documents/utils/data_preparation.py:284:38: ANN001 Missing type annotation for function argument `descriptions`
    |
282 |         return df.drop(columns=["Deskripsi"])
283 |
284 |     def _find_max_descriptions(self, descriptions):
    |                                      ^^^^^^^^^^^^ ANN001
285 |         """
286 |         Finds the maximum number of bullet points or numbered items in the 'Deskripsi' column.
    |

backend/app/config/documents/utils/data_preparation.py:293:14: PGH004 Use specific rule codes when using `noqa`
    |
291 |         Returns:
292 |             int: The maximum count of descriptions found in any single row.
293 |         """  # noqa
    |              ^^^^^^ PGH004
294 |         counts = descriptions.apply(
295 |             lambda text: len(re.split(self.split_regex, text.strip())) - 1,
    |

backend/app/config/documents/utils/data_preparation.py:299:9: ANN202 Missing return type annotation for private function `_extract_descriptions`
    |
297 |         return counts.max()
298 |
299 |     def _extract_descriptions(self, text):
    |         ^^^^^^^^^^^^^^^^^^^^^ ANN202
300 |         """
301 |         Extracts individual descriptions from the given text based on bullet points or numbering.
    |
    = help: Add return type annotation

backend/app/config/documents/utils/data_preparation.py:299:37: ANN001 Missing type annotation for function argument `text`
    |
297 |         return counts.max()
298 |
299 |     def _extract_descriptions(self, text):
    |                                     ^^^^ ANN001
300 |         """
301 |         Extracts individual descriptions from the given text based on bullet points or numbering.
    |

backend/app/config/documents/utils/data_preparation.py:308:14: PGH004 Use specific rule codes when using `noqa`
    |
306 |         Returns:
307 |             list: A list of extracted descriptions.
308 |         """  # noqa
    |              ^^^^^^ PGH004
309 |         descriptions = re.split(self.split_regex, text.strip())
310 |         return [desc.strip() for desc in descriptions if desc.strip()]
    |

backend/app/config/documents/utils/data_preparation.py:326:10: PGH004 Use specific rule codes when using `noqa`
    |
324 |         date_pattern (re.Pattern): A compiled regular expression pattern used to identify
325 |                                    and extract date components from text.
326 |     """  # noqa
    |          ^^^^^^ PGH004
327 |
328 |     def __init__(self) -> None:
    |

backend/app/config/documents/utils/data_preparation.py:332:14: PGH004 Use specific rule codes when using `noqa`
    |
330 |         Initializes the FormattingColumn instance, setting up the month dictionary and
331 |         compiling the date pattern regular expression.
332 |         """  # noqa
    |              ^^^^^^ PGH004
333 |         self.months_dict = {
334 |             "jan": "01",
    |

backend/app/config/documents/utils/data_preparation.py:578:9: ANN205 Missing return type annotation for staticmethod `_calculate_similarity`
    |
577 |     @staticmethod
578 |     def _calculate_similarity(str1, str2):
    |         ^^^^^^^^^^^^^^^^^^^^^ ANN205
579 |         """
580 |         Calculate the similarity percentage between two strings using Levenshtein distance.
    |
    = help: Add return type annotation

backend/app/config/documents/utils/data_preparation.py:578:31: ANN001 Missing type annotation for function argument `str1`
    |
577 |     @staticmethod
578 |     def _calculate_similarity(str1, str2):
    |                               ^^^^ ANN001
579 |         """
580 |         Calculate the similarity percentage between two strings using Levenshtein distance.
    |

backend/app/config/documents/utils/data_preparation.py:578:37: ANN001 Missing type annotation for function argument `str2`
    |
577 |     @staticmethod
578 |     def _calculate_similarity(str1, str2):
    |                                     ^^^^ ANN001
579 |         """
580 |         Calculate the similarity percentage between two strings using Levenshtein distance.
    |

backend/app/config/documents/utils/data_preparation.py:588:14: PGH004 Use specific rule codes when using `noqa`
    |
586 |         Returns:
587 |             float: The similarity percentage between the two strings.
588 |         """  # noqa
    |              ^^^^^^ PGH004
589 |         len_str1, len_str2 = len(str1), len(str2)
590 |         max_len = max(len_str1, len_str2)
    |

backend/app/config/documents/utils/data_preparation.py:616:9: ANN201 Missing return type annotation for public function `format_birth_date`
    |
614 |         return ((max_len - distance) / max_len) * 100
615 |
616 |     def format_birth_date(self, df):
    |         ^^^^^^^^^^^^^^^^^ ANN201
617 |         """
618 |         Formats birth dates from the 'Tgl lahir' column of the input DataFrame.
    |
    = help: Add return type annotation

backend/app/config/documents/utils/data_preparation.py:616:33: ANN001 Missing type annotation for function argument `df`
    |
614 |         return ((max_len - distance) / max_len) * 100
615 |
616 |     def format_birth_date(self, df):
    |                                 ^^ ANN001
617 |         """
618 |         Formats birth dates from the 'Tgl lahir' column of the input DataFrame.
    |

backend/app/config/documents/utils/data_preparation.py:625:14: PGH004 Use specific rule codes when using `noqa`
    |
623 |         Returns:
624 |             pd.DataFrame: The DataFrame with additional columns for formatted birth dates.
625 |         """  # noqa
    |              ^^^^^^ PGH004
626 |         for i in range(1, 4):
627 |             df[f"birth_date_{i}"] = ""
    |

backend/app/config/documents/utils/data_preparation.py:635:25: PLR2004 Magic value used in comparison, consider replacing `3` with a constant variable
    |
633 |             dates = self.extract_dates(row["Tgl Lahir"])
634 |             for i, date_str in enumerate(dates):
635 |                 if i >= 3:
    |                         ^ PLR2004
636 |                     break
637 |                 df.at[index, f"birth_date_{i+1}"] = date_str
    |

backend/app/config/documents/utils/data_preparation.py:637:17: PD008 Use `.loc` instead of `.at`. If speed is important, use NumPy.
    |
635 |                 if i >= 3:
636 |                     break
637 |                 df.at[index, f"birth_date_{i+1}"] = date_str
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PD008
638 |
639 |         return df
    |

backend/app/config/documents/utils/data_preparation.py:641:9: ANN201 Missing return type annotation for public function `extract_dates`
    |
639 |         return df
640 |
641 |     def extract_dates(self, text):
    |         ^^^^^^^^^^^^^ ANN201
642 |         """
643 |         Extracts and formats dates from a text string containing one or more dates.
    |
    = help: Add return type annotation

backend/app/config/documents/utils/data_preparation.py:641:29: ANN001 Missing type annotation for function argument `text`
    |
639 |         return df
640 |
641 |     def extract_dates(self, text):
    |                             ^^^^ ANN001
642 |         """
643 |         Extracts and formats dates from a text string containing one or more dates.
    |

backend/app/config/documents/utils/data_preparation.py:650:14: PGH004 Use specific rule codes when using `noqa`
    |
648 |         Returns:
649 |             list: A list of formatted dates as strings.
650 |         """  # noqa
    |              ^^^^^^ PGH004
651 |         if not isinstance(text, str) or text == "00/00/0000":
652 |             return []
    |

backend/app/config/documents/utils/data_preparation.py:656:29: ANN001 Missing type annotation for function argument `match`
    |
654 |         return [self._format_match(match) for match in matches]
655 |
656 |     def _format_match(self, match) -> str:
    |                             ^^^^^ ANN001
657 |         """Formats a single date match into YYYY/MM/DD format."""
658 |         day = match.group("day") or match.group("day2")
    |

backend/app/config/documents/utils/data_preparation.py:657:9: D401 First line of docstring should be in imperative mood: "Formats a single date match into YYYY/MM/DD format."
    |
656 |     def _format_match(self, match) -> str:
657 |         """Formats a single date match into YYYY/MM/DD format."""
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D401
658 |         day = match.group("day") or match.group("day2")
659 |         month = match.group("month") or match.group("month2")
    |

backend/app/config/documents/utils/data_preparation.py:670:9: ANN202 Missing return type annotation for private function `_month_to_number`
    |
668 |         return f"{year}/{month_number}/{day.zfill(2)}"
669 |
670 |     def _month_to_number(self, month):
    |         ^^^^^^^^^^^^^^^^ ANN202
671 |         """
672 |         Converts a month name or abbreviation to its numeric representation.
    |
    = help: Add return type annotation

backend/app/config/documents/utils/data_preparation.py:670:32: ANN001 Missing type annotation for function argument `month`
    |
668 |         return f"{year}/{month_number}/{day.zfill(2)}"
669 |
670 |     def _month_to_number(self, month):
    |                                ^^^^^ ANN001
671 |         """
672 |         Converts a month name or abbreviation to its numeric representation.
    |

backend/app/config/documents/utils/data_preparation.py:679:14: PGH004 Use specific rule codes when using `noqa`
    |
677 |         Returns:
678 |             str: The numeric representation of the month, zero-padded to two digits.
679 |         """  # noqa
    |              ^^^^^^ PGH004
680 |         return self.months_dict.get(month.lower(), month.zfill(2))
    |

backend/app/config/documents/utils/data_preparation.py:682:9: ANN202 Missing return type annotation for private function `_adjust_year`
    |
680 |         return self.months_dict.get(month.lower(), month.zfill(2))
681 |
682 |     def _adjust_year(self, year):
    |         ^^^^^^^^^^^^ ANN202
683 |         """
684 |         Adjusts a two-digit year to a four-digit year based on a cutoff.
    |
    = help: Add return type annotation

backend/app/config/documents/utils/data_preparation.py:682:28: ANN001 Missing type annotation for function argument `year`
    |
680 |         return self.months_dict.get(month.lower(), month.zfill(2))
681 |
682 |     def _adjust_year(self, year):
    |                            ^^^^ ANN001
683 |         """
684 |         Adjusts a two-digit year to a four-digit year based on a cutoff.
    |

backend/app/config/documents/utils/data_preparation.py:691:14: PGH004 Use specific rule codes when using `noqa`
    |
689 |         Returns:
690 |             str: The adjusted four-digit year.
691 |         """  # noqa
    |              ^^^^^^ PGH004
692 |         if len(year) == 2:
693 |             return f"19{year}" if int(year) > 22 else f"20{year}"
    |

backend/app/config/documents/utils/data_preparation.py:692:25: PLR2004 Magic value used in comparison, consider replacing `2` with a constant variable
    |
690 |             str: The adjusted four-digit year.
691 |         """  # noqa
692 |         if len(year) == 2:
    |                         ^ PLR2004
693 |             return f"19{year}" if int(year) > 22 else f"20{year}"
694 |         return year
    |

backend/app/config/documents/utils/data_preparation.py:693:47: PLR2004 Magic value used in comparison, consider replacing `22` with a constant variable
    |
691 |         """  # noqa
692 |         if len(year) == 2:
693 |             return f"19{year}" if int(year) > 22 else f"20{year}"
    |                                               ^^ PLR2004
694 |         return year
    |

backend/app/config/documents/utils/data_preparation.py:696:9: ANN201 Missing return type annotation for public function `format_nationality`
    |
694 |         return year
695 |
696 |     def format_nationality(self, df):
    |         ^^^^^^^^^^^^^^^^^^ ANN201
697 |         """
698 |         Processes and formats the 'WN' column of the input DataFrame, standardizing nationality information
    |
    = help: Add return type annotation

backend/app/config/documents/utils/data_preparation.py:696:34: ANN001 Missing type annotation for function argument `df`
    |
694 |         return year
695 |
696 |     def format_nationality(self, df):
    |                                  ^^ ANN001
697 |         """
698 |         Processes and formats the 'WN' column of the input DataFrame, standardizing nationality information
    |

backend/app/config/documents/utils/data_preparation.py:706:14: PGH004 Use specific rule codes when using `noqa`
    |
704 |         Returns:
705 |             pd.DataFrame: The DataFrame with formatted and possibly split nationality information.
706 |         """  # noqa
    |              ^^^^^^ PGH004
707 |         # Initialize new columns for the potentially split nationalities
708 |         df["WN_1"], df["WN_2"] = "", ""
    |

backend/app/config/documents/utils/data_preparation.py:713:17: PD008 Use `.loc` instead of `.at`. If speed is important, use NumPy.
    |
711 |             nationalities = self._clean_and_split_nationality(row["WN"])
712 |             if len(nationalities) > 0:
713 |                 df.at[index, "WN_1"] = self._standardize_country_name(
    |                 ^^^^^^^^^^^^^^^^^^^^ PD008
714 |                     nationalities[0],
715 |                 )
    |

backend/app/config/documents/utils/data_preparation.py:717:17: PD008 Use `.loc` instead of `.at`. If speed is important, use NumPy.
    |
715 |                 )
716 |             if len(nationalities) > 1:
717 |                 df.at[index, "WN_2"] = self._standardize_country_name(
    |                 ^^^^^^^^^^^^^^^^^^^^ PD008
718 |                     nationalities[1],
719 |                 )
    |

backend/app/config/documents/utils/data_preparation.py:723:9: ANN202 Missing return type annotation for private function `_clean_and_split_nationality`
    |
721 |         return df
722 |
723 |     def _clean_and_split_nationality(self, nationality_str):
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ANN202
724 |         """
725 |         Cleans, splits, and standardizes the nationality string into a list of standardized nationalities,
    |
    = help: Add return type annotation

backend/app/config/documents/utils/data_preparation.py:723:44: ANN001 Missing type annotation for function argument `nationality_str`
    |
721 |         return df
722 |
723 |     def _clean_and_split_nationality(self, nationality_str):
    |                                            ^^^^^^^^^^^^^^^ ANN001
724 |         """
725 |         Cleans, splits, and standardizes the nationality string into a list of standardized nationalities,
    |

backend/app/config/documents/utils/data_preparation.py:734:14: PGH004 Use specific rule codes when using `noqa`
    |
732 |         Returns:
733 |             list: A list of cleaned, split, and potentially standardized nationalities.
734 |         """  # noqa
    |              ^^^^^^ PGH004
735 |         if not isinstance(nationality_str, str):
736 |             return []
    |

backend/app/config/documents/utils/data_preparation.py:755:9: ANN202 Missing return type annotation for private function `_standardize_country_name`
    |
753 |         return standardized_nationalities
754 |
755 |     def _standardize_country_name(self, country_name):
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^ ANN202
756 |         """
757 |         Standardizes a country name based on known variations and similarity comparison, choosing the closest match
    |
    = help: Add return type annotation

backend/app/config/documents/utils/data_preparation.py:755:41: ANN001 Missing type annotation for function argument `country_name`
    |
753 |         return standardized_nationalities
754 |
755 |     def _standardize_country_name(self, country_name):
    |                                         ^^^^^^^^^^^^ ANN001
756 |         """
757 |         Standardizes a country name based on known variations and similarity comparison, choosing the closest match
    |

backend/app/config/documents/utils/data_preparation.py:766:14: PGH004 Use specific rule codes when using `noqa`
    |
764 |             str: The standardized country name if a similar name is found in the dictionary with the highest similarity
765 |                 score; otherwise, the input name.
766 |         """  # noqa
    |              ^^^^^^ PGH004
767 |         best_score = 0
768 |         best_match = None
    |

backend/app/config/documents/utils/data_preparation.py:775:26: PLR2004 Magic value used in comparison, consider replacing `85` with a constant variable
    |
773 |                 best_match = standardized_name
774 |
775 |         if best_score >= 85:
    |                          ^^ PLR2004
776 |             return best_match
777 |         return country_name
    |

backend/app/config/documents/utils/data_preparation.py:780:5: ANN201 Missing return type annotation for public function `process_data`
    |
780 | def process_data(file_path, document_format):
    |     ^^^^^^^^^^^^ ANN201
781 |     processor = DTTOTDocumentProcessing()
782 |     df = processor.retrieve_data_as_dataframe(file_path, document_format)
    |
    = help: Add return type annotation

backend/app/config/documents/utils/data_preparation.py:780:18: ANN001 Missing type annotation for function argument `file_path`
    |
780 | def process_data(file_path, document_format):
    |                  ^^^^^^^^^ ANN001
781 |     processor = DTTOTDocumentProcessing()
782 |     df = processor.retrieve_data_as_dataframe(file_path, document_format)
    |

backend/app/config/documents/utils/data_preparation.py:780:29: ANN001 Missing type annotation for function argument `document_format`
    |
780 | def process_data(file_path, document_format):
    |                             ^^^^^^^^^^^^^^^ ANN001
781 |     processor = DTTOTDocumentProcessing()
782 |     df = processor.retrieve_data_as_dataframe(file_path, document_format)
    |

backend/app/config/documents/utils/data_preparation.py:782:5: PD901 Avoid using the generic variable name `df` for DataFrames
    |
780 | def process_data(file_path, document_format):
781 |     processor = DTTOTDocumentProcessing()
782 |     df = processor.retrieve_data_as_dataframe(file_path, document_format)
    |     ^^ PD901
783 |
784 |     df = processor.extract_and_split_names(df)
    |

backend/app/config/documents/utils/data_preparation.py:784:5: PD901 Avoid using the generic variable name `df` for DataFrames
    |
782 |     df = processor.retrieve_data_as_dataframe(file_path, document_format)
783 |
784 |     df = processor.extract_and_split_names(df)
    |     ^^ PD901
785 |
786 |     extractor = ExtractNIKandPassportNumber()
    |

backend/app/config/documents/utils/data_preparation.py:787:5: PD901 Avoid using the generic variable name `df` for DataFrames
    |
786 |     extractor = ExtractNIKandPassportNumber()
787 |     df = extractor.extract_nik_and_passport_number(df)
    |     ^^ PD901
788 |
789 |     cleaner = CleaningSeparatingDeskripsi()
    |

backend/app/config/documents/utils/data_preparation.py:790:5: PD901 Avoid using the generic variable name `df` for DataFrames
    |
789 |     cleaner = CleaningSeparatingDeskripsi()
790 |     df = cleaner.separating_cleaning_deskripsi(df)
    |     ^^ PD901
791 |
792 |     formatter = FormattingColumn()
    |

backend/app/config/documents/utils/data_preparation.py:793:5: PD901 Avoid using the generic variable name `df` for DataFrames
    |
792 |     formatter = FormattingColumn()
793 |     df = formatter.format_birth_date(df)
    |     ^^ PD901
794 |     return formatter.format_nationality(df)
    |

backend/app/config/documents/utils/tests/test_data_preparation.py:34:30: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
   |
32 | Jane Smith,Guru Honorer,Orang"""
33 |         # Create a test CSV file
34 |         self.csv_file_path = os.path.join(self.temp_dir, "test.csv")
   |                              ^^^^^^^^^^^^ PTH118
35 |         with open(self.csv_file_path, "w") as f:
36 |             f.write(self.csv_content)
   |

backend/app/config/documents/utils/tests/test_data_preparation.py:35:14: PTH123 `open()` should be replaced by `Path.open()`
   |
33 |         # Create a test CSV file
34 |         self.csv_file_path = os.path.join(self.temp_dir, "test.csv")
35 |         with open(self.csv_file_path, "w") as f:
   |              ^^^^ PTH123
36 |             f.write(self.csv_content)
   |

backend/app/config/documents/utils/tests/test_data_preparation.py:45:9: PD901 Avoid using the generic variable name `df` for DataFrames
   |
43 |     def test_import_document_csv(self) -> None:
44 |         """Test processing a DTTOT document uploaded as a CSV file."""
45 |         df = self.processing.import_document(self.csv_file_path, "CSV")
   |         ^^ PD901
46 |         expected_columns = ["Nama", "Deskripsi", "Terduga"]
47 |         assert list(df.columns) == expected_columns
   |

backend/app/config/documents/utils/tests/test_data_preparation.py:47:9: S101 Use of `assert` detected
   |
45 |         df = self.processing.import_document(self.csv_file_path, "CSV")
46 |         expected_columns = ["Nama", "Deskripsi", "Terduga"]
47 |         assert list(df.columns) == expected_columns
   |         ^^^^^^ S101
48 |
49 |     def test_extract_aliases_from_names(self) -> None:
   |

backend/app/config/documents/utils/tests/test_data_preparation.py:56:9: PD901 Avoid using the generic variable name `df` for DataFrames
   |
54 |         # Define a DataFrame with the 'Nama' column
55 |         # containing names and aliases
56 |         df = pd.DataFrame(
   |         ^^ PD901
57 |             {
58 |                 "Nama": [
   |

backend/app/config/documents/utils/tests/test_data_preparation.py:95:13: T201 `print` found
   |
93 |             pd.testing.assert_frame_equal(processed_df, expected_df, check_like=True)
94 |         except AssertionError as e:
95 |             print("AssertionError caught!")
   |             ^^^^^ T201
96 |             print("DataFrame resulting from the processing:")
97 |             print(processed_df)
   |
   = help: Remove `print`

backend/app/config/documents/utils/tests/test_data_preparation.py:96:13: T201 `print` found
   |
94 |         except AssertionError as e:
95 |             print("AssertionError caught!")
96 |             print("DataFrame resulting from the processing:")
   |             ^^^^^ T201
97 |             print(processed_df)
98 |             print("Expected DataFrame:")
   |
   = help: Remove `print`

backend/app/config/documents/utils/tests/test_data_preparation.py:97:13: T201 `print` found
   |
95 |             print("AssertionError caught!")
96 |             print("DataFrame resulting from the processing:")
97 |             print(processed_df)
   |             ^^^^^ T201
98 |             print("Expected DataFrame:")
99 |             print(expected_df)
   |
   = help: Remove `print`

backend/app/config/documents/utils/tests/test_data_preparation.py:98:13: T201 `print` found
    |
 96 |             print("DataFrame resulting from the processing:")
 97 |             print(processed_df)
 98 |             print("Expected DataFrame:")
    |             ^^^^^ T201
 99 |             print(expected_df)
100 |             raise
    |
    = help: Remove `print`

backend/app/config/documents/utils/tests/test_data_preparation.py:99:13: T201 `print` found
    |
 97 |             print(processed_df)
 98 |             print("Expected DataFrame:")
 99 |             print(expected_df)
    |             ^^^^^ T201
100 |             raise
    |
    = help: Remove `print`

backend/app/config/documents/utils/tests/test_data_preparation.py:119:10: PGH004 Use specific rule codes when using `noqa`
    |
117 |         processing (DTTOTDocumentProcessing): An instance of the class under test that processes documents.
118 |         xls_file_path (str): The file path to the test XLS document created for testing.
119 |     """  # noqa
    |          ^^^^^^ PGH004
120 |
121 |     @classmethod
    |

backend/app/config/documents/utils/tests/test_data_preparation.py:128:14: PGH004 Use specific rule codes when using `noqa`
    |
126 |         of the document processing classes. It also creates a sample XLS file to be used
127 |         in the tests.
128 |         """  # noqa
    |              ^^^^^^ PGH004
129 |         # Create a temporary directory to hold the test files
130 |         cls.temp_dir = tempfile.mkdtemp()
    |

backend/app/config/documents/utils/tests/test_data_preparation.py:136:29: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
    |
134 |         cls.processing_formatting = FormattingColumn()
135 |         # Create a test XLS file using openpyxl
136 |         cls.xls_file_path = os.path.join(cls.temp_dir, "test.xlsx")
    |                             ^^^^^^^^^^^^ PTH118
137 |         workbook = Workbook()
138 |         sheet = workbook.active
    |

backend/app/config/documents/utils/tests/test_data_preparation.py:155:14: PGH004 Use specific rule codes when using `noqa`
    |
153 |         Tear down the test environment after each test in the class has run. This method
154 |         removes the temporary directory and all its contents, cleaning up the test environment.
155 |         """  # noqa
    |              ^^^^^^ PGH004
156 |         # Remove the temporary directory and all its contents after the tests
157 |         shutil.rmtree(cls.temp_dir)
    |

backend/app/config/documents/utils/tests/test_data_preparation.py:163:14: PGH004 Use specific rule codes when using `noqa`
    |
161 |         Test the functionality of importing a document uploaded as an XLS file. This test
162 |         verifies that the imported document has the expected columns and is not empty.
163 |         """  # noqa
    |              ^^^^^^ PGH004
164 |         df = self.processing.import_document(self.xls_file_path, "XLSX")
165 |         expected_columns = ["Nama", "Deskripsi", "Terduga"]
    |

backend/app/config/documents/utils/tests/test_data_preparation.py:164:9: PD901 Avoid using the generic variable name `df` for DataFrames
    |
162 |         verifies that the imported document has the expected columns and is not empty.
163 |         """  # noqa
164 |         df = self.processing.import_document(self.xls_file_path, "XLSX")
    |         ^^ PD901
165 |         expected_columns = ["Nama", "Deskripsi", "Terduga"]
166 |         assert list(df.columns) == expected_columns
    |

backend/app/config/documents/utils/tests/test_data_preparation.py:166:9: S101 Use of `assert` detected
    |
164 |         df = self.processing.import_document(self.xls_file_path, "XLSX")
165 |         expected_columns = ["Nama", "Deskripsi", "Terduga"]
166 |         assert list(df.columns) == expected_columns
    |         ^^^^^^ S101
167 |         assert not df.empty
    |

backend/app/config/documents/utils/tests/test_data_preparation.py:167:9: S101 Use of `assert` detected
    |
165 |         expected_columns = ["Nama", "Deskripsi", "Terduga"]
166 |         assert list(df.columns) == expected_columns
167 |         assert not df.empty
    |         ^^^^^^ S101
168 |
169 |     def test_extract_aliases_from_names(self) -> None:
    |

backend/app/config/documents/utils/tests/test_data_preparation.py:174:14: PGH004 Use specific rule codes when using `noqa`
    |
172 |         checks whether the extraction and separation of names and aliases are performed accurately,
173 |         comparing the processed DataFrame against an expected structure.
174 |         """  # noqa
    |              ^^^^^^ PGH004
175 |         # Given input DataFrame with 'Nama' column
176 |         input_df = pd.DataFrame(
    |

backend/app/config/documents/utils/tests/test_data_preparation.py:224:9: N802 Function name `test_extract_idNumber_and_Paspor_fromDeskripsi_column` should be lowercase
    |
222 |         )
223 |
224 |     def test_extract_idNumber_and_Paspor_fromDeskripsi_column(self) -> None:
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ N802
225 |         """Test extracting id_number and passport_number from separated description columns
226 |         where 'Terduga' has the value 'Orang'."""  # noqa
    |

backend/app/config/documents/utils/tests/test_data_preparation.py:226:52: PGH004 Use specific rule codes when using `noqa`
    |
224 |     def test_extract_idNumber_and_Paspor_fromDeskripsi_column(self) -> None:
225 |         """Test extracting id_number and passport_number from separated description columns
226 |         where 'Terduga' has the value 'Orang'."""  # noqa
    |                                                    ^^^^^^ PGH004
227 |         # Given input DataFrame with separated description columns
228 |         input_df = pd.DataFrame(
    |

backend/app/config/documents/utils/tests/test_data_preparation.py:358:9: D205 1 blank line required between summary line and description
    |
357 |       def test_separating_description(self) -> None:
358 |           """Test separating per bulletpoint in `Deskripsi` column to sequennce of
    |  _________^
359 | |         description column (description_{number of sequence}).
360 | |         """
    | |___________^ D205
361 |           input_df = pd.DataFrame(
362 |               {
    |
    = help: Insert single blank line

backend/app/config/documents/utils/tests/test_data_preparation.py:393:28: SLF001 Private member accessed: `_find_max_descriptions`
    |
391 |         )
392 |
393 |         max_descriptions = self.processing_separating._find_max_descriptions(
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ SLF001
394 |             input_df["Deskripsi"],
395 |         )
    |

backend/app/config/documents/utils/tests/test_data_preparation.py:405:9: S101 Use of `assert` detected
    |
403 |         # to the maximum bullet points in any 'Deskripsi' entry
404 |         description_columns = [f"description_{i+1}" for i in range(max_descriptions)]
405 |         assert all(column in processed_df.columns for column in description_columns), "Missing description columns"
    |         ^^^^^^ S101
406 |
407 |         # Expected output DataFrame
    |

backend/app/config/documents/utils/tests/test_data_preparation.py:468:9: S101 Use of `assert` detected
    |
467 |         # Assert that the structure of processed_df is as expected
468 |         assert all(processed_df[column].equals(input_df[column]) for column in ["Kode_ID", "Terduga"])
    |         ^^^^^^ S101
469 |
470 |         # Assert the equality of each description_{i+1} column
    |

backend/app/config/documents/utils/tests/test_data_preparation.py:482:9: S101 Use of `assert` detected
    |
480 |         # Assert no unexpected columns are present
481 |         expected_columns = {"Kode_ID", "Terduga", *description_columns}
482 |         assert set(processed_df.columns) == expected_columns, "Unexpected columns in processed DataFrame"
    |         ^^^^^^ S101
483 |
484 |         # Verify 'Terduga' column remains unchanged
    |

backend/app/config/documents/utils/tests/test_data_preparation.py:494:13: S101 Use of `assert` detected
    |
492 |         for i in range(1, max_descriptions + 1):
493 |             column_name = f"description_{i}"
494 |             assert column_name in processed_df.columns, f"{column_name} is missing in the processed DataFrame"
    |             ^^^^^^ S101
495 |
496 |             # Content check - ensuring column is not empty
    |

backend/app/config/documents/utils/tests/test_data_preparation.py:508:17: S101 Use of `assert` detected
    |
506 |                     .sum()
507 |                 )
508 |                 assert processed_non_empty <= expected_non_empty, f"Column {column_name} has more non-empty entries than expected."
    |                 ^^^^^^ S101
509 |
510 |     def test_birth_date_formatting(self) -> None:
    |

backend/app/config/documents/utils/tests/test_data_preparation.py:513:14: PGH004 Use specific rule codes when using `noqa`
    |
511 |         """
512 |         Test formatting value from `Tgl lahir` column thas has different formatting style for each row
513 |         """  # noqa
    |              ^^^^^^ PGH004
514 |         # Given input DataFrame with different formatting style in `Tgl lahir` column
515 |         input_df = pd.DataFrame(
    |

backend/app/config/documents/views.py:28:22: RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
   |
26 | class DocumentListView(GenericAPIView):
27 |     serializer_class = DocumentSerializer
28 |     parser_classes = [JSONParser, MultiPartParser]
   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ RUF012
29 |     permission_classes = [permissions.IsAuthenticated]
   |

backend/app/config/documents/views.py:29:26: RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
   |
27 |     serializer_class = DocumentSerializer
28 |     parser_classes = [JSONParser, MultiPartParser]
29 |     permission_classes = [permissions.IsAuthenticated]
   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ RUF012
30 |
31 |     def get(self, request: Request) -> Response:
   |

backend/app/config/documents/views.py:31:19: ARG002 Unused method argument: `request`
   |
29 |     permission_classes = [permissions.IsAuthenticated]
30 |
31 |     def get(self, request: Request) -> Response:
   |                   ^^^^^^^ ARG002
32 |         documents = Document.objects.all()
33 |         serializer = self.get_serializer(documents, many=True)
   |

backend/app/config/documents/views.py:43:21: G004 Logging statement uses f-string
   |
41 |     def post(self, request: Request) -> Response:
42 |         context = {"request": request}
43 |         logger.info(f"Request data: {request.data}")
   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
44 |         serializer = self.get_serializer(data=request.data, context=context)
45 |         serializer.is_valid(raise_exception=True)
   |

backend/app/config/documents/views.py:67:25: G004 Logging statement uses f-string
   |
65 |                 "dsb_user_personal": "Processing started",
66 |             }
67 |             logger.info(f"Response data: {response_data}")
   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
68 |             return Response(response_data, status=status.HTTP_201_CREATED)
69 |         else:
   |

backend/app/config/documents/views.py:69:9: RET505 Unnecessary `else` after `return` statement
   |
67 |             logger.info(f"Response data: {response_data}")
68 |             return Response(response_data, status=status.HTTP_201_CREATED)
69 |         else:
   |         ^^^^ RET505
70 |             return Response(serializer.data, status=status.HTTP_201_CREATED)
   |
   = help: Remove unnecessary `else`

backend/app/config/documents/views.py:79:22: RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
   |
77 | class DocumentDetailView(GenericAPIView):
78 |     serializer_class = DocumentSerializer
79 |     parser_classes = [JSONParser, MultiPartParser]
   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ RUF012
80 |     permission_classes = [permissions.IsAuthenticated]
   |

backend/app/config/documents/views.py:80:26: RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
   |
78 |     serializer_class = DocumentSerializer
79 |     parser_classes = [JSONParser, MultiPartParser]
80 |     permission_classes = [permissions.IsAuthenticated]
   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ RUF012
81 |
82 |     @extend_schema(
   |

backend/app/config/documents/views.py:87:19: ARG002 Unused method argument: `request`
   |
85 |         responses={200: DocumentSerializer},
86 |     )
87 |     def get(self, request: Request, document_id: str) -> Response:
   |                   ^^^^^^^ ARG002
88 |         document = Document.objects.get(document_id=document_id)
89 |         serializer = self.get_serializer(document)
   |

backend/app/config/documents/views.py:106:22: ARG002 Unused method argument: `request`
    |
104 |         return Response(serializer.data)
105 |
106 |     def delete(self, request: Request, document_id: str) -> Response:
    |                      ^^^^^^^ ARG002
107 |         document = Document.objects.get(document_id=document_id)
108 |         document.delete()
    |

backend/app/config/dsb_user_personal/apps.py:11:54: PGH004 Use specific rule codes when using `noqa`
   |
10 |     def ready(self) -> None:
11 |         import app.config.dsb_user_personal.signals  # noqa
   |                                                      ^^^^^^ PGH004
   |

backend/app/config/dsb_user_personal/serializers.py:24:28: RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
   |
22 |           model = dsb_user_personal
23 |           fields = "__all__"
24 |           read_only_fields = [
   |  ____________________________^
25 | |             "dsb_user_personal_id",
26 | |             "created_date",
27 | |             "updated_date",
28 | |             "last_update_by",
29 | |             "initial_registration_date",
30 | |             "coredsb_user_id",
31 | |             "user_upgrade_to_personal_date",
32 | |             "users_last_modified_date",
33 | |             "personal_legal_last_modified_date",
34 | |         ]
   | |_________^ RUF012
35 |
36 |       def create(self, validated_data):
   |

backend/app/config/dsb_user_personal/serializers.py:36:9: ANN201 Missing return type annotation for public function `create`
   |
34 |         ]
35 |
36 |     def create(self, validated_data):
   |         ^^^^^^ ANN201
37 |         user = self.context.get("request").user if self.context.get("request") else None
38 |         validated_data["user"] = validated_data.get("user", user)
   |
   = help: Add return type annotation

backend/app/config/dsb_user_personal/serializers.py:36:22: ANN001 Missing type annotation for function argument `validated_data`
   |
34 |         ]
35 |
36 |     def create(self, validated_data):
   |                      ^^^^^^^^^^^^^^ ANN001
37 |         user = self.context.get("request").user if self.context.get("request") else None
38 |         validated_data["user"] = validated_data.get("user", user)
   |

backend/app/config/dsb_user_personal/serializers.py:42:9: ANN201 Missing return type annotation for public function `to_representation`
   |
40 |         return dsb_user_personal.objects.create(document=document, **validated_data)
41 |
42 |     def to_representation(self, instance):
   |         ^^^^^^^^^^^^^^^^^ ANN201
43 |         representation = super().to_representation(instance)
44 |         representation["user_id"] = instance.user.user_id if instance.user else None
   |
   = help: Add return type annotation

backend/app/config/dsb_user_personal/serializers.py:42:33: ANN001 Missing type annotation for function argument `instance`
   |
40 |         return dsb_user_personal.objects.create(document=document, **validated_data)
41 |
42 |     def to_representation(self, instance):
   |                                 ^^^^^^^^ ANN001
43 |         representation = super().to_representation(instance)
44 |         representation["user_id"] = instance.user.user_id if instance.user else None
   |

backend/app/config/dsb_user_personal/signals.py:11:5: ANN001 Missing type annotation for function argument `sender`
   |
 9 | @receiver(dsb_user_personal_document_created)
10 | def trigger_dsb_user_personal_processing(
11 |     sender,
   |     ^^^^^^ ANN001
12 |     instance,
13 |     created,
   |

backend/app/config/dsb_user_personal/signals.py:11:5: ARG001 Unused function argument: `sender`
   |
 9 | @receiver(dsb_user_personal_document_created)
10 | def trigger_dsb_user_personal_processing(
11 |     sender,
   |     ^^^^^^ ARG001
12 |     instance,
13 |     created,
   |

backend/app/config/dsb_user_personal/signals.py:12:5: ANN001 Missing type annotation for function argument `instance`
   |
10 | def trigger_dsb_user_personal_processing(
11 |     sender,
12 |     instance,
   |     ^^^^^^^^ ANN001
13 |     created,
14 |     context,
   |

backend/app/config/dsb_user_personal/signals.py:13:5: ANN001 Missing type annotation for function argument `created`
   |
11 |     sender,
12 |     instance,
13 |     created,
   |     ^^^^^^^ ANN001
14 |     context,
15 |     user_data,
   |

backend/app/config/dsb_user_personal/signals.py:14:5: ANN001 Missing type annotation for function argument `context`
   |
12 |     instance,
13 |     created,
14 |     context,
   |     ^^^^^^^ ANN001
15 |     user_data,
16 |     **kwargs,
   |

backend/app/config/dsb_user_personal/signals.py:14:5: ARG001 Unused function argument: `context`
   |
12 |     instance,
13 |     created,
14 |     context,
   |     ^^^^^^^ ARG001
15 |     user_data,
16 |     **kwargs,
   |

backend/app/config/dsb_user_personal/signals.py:15:5: ANN001 Missing type annotation for function argument `user_data`
   |
13 |     created,
14 |     context,
15 |     user_data,
   |     ^^^^^^^^^ ANN001
16 |     **kwargs,
17 | ) -> None:
   |

backend/app/config/dsb_user_personal/signals.py:16:5: ANN003 Missing type annotation for `**kwargs`
   |
14 |     context,
15 |     user_data,
16 |     **kwargs,
   |     ^^^^^^^^ ANN003
17 | ) -> None:
18 |     if created:
   |

backend/app/config/dsb_user_personal/signals.py:16:7: ARG001 Unused function argument: `kwargs`
   |
14 |     context,
15 |     user_data,
16 |     **kwargs,
   |       ^^^^^^ ARG001
17 | ) -> None:
18 |     if created:
   |

backend/app/config/dsb_user_personal/tasks.py:17:40: ANN001 Missing type annotation for function argument `document_id`
   |
16 | @shared_task
17 | def process_dsb_user_personal_document(document_id, user_data) -> None:
   |                                        ^^^^^^^^^^^ ANN001
18 |     try:
19 |         document = Document.objects.get(pk=document_id)
   |

backend/app/config/dsb_user_personal/tasks.py:17:53: ANN001 Missing type annotation for function argument `user_data`
   |
16 | @shared_task
17 | def process_dsb_user_personal_document(document_id, user_data) -> None:
   |                                                     ^^^^^^^^^ ANN001
18 |     try:
19 |         document = Document.objects.get(pk=document_id)
   |

backend/app/config/dsb_user_personal/tasks.py:22:9: PD901 Avoid using the generic variable name `df` for DataFrames
   |
20 |         user_id = user_data["user_id"]
21 |
22 |         df = fetch_data_from_external_db()
   |         ^^ PD901
23 |         save_data_to_model(df, document, user_id)
   |

backend/app/config/dsb_user_personal/tasks.py:27:21: G004 Logging statement uses f-string
   |
25 |         document.status = "Processed"
26 |         document.save()
27 |         logger.info(f"Document {document_id} is being processed.")
   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
28 |     except Exception as e:
29 |         document.status = "Failed"
   |

backend/app/config/dsb_user_personal/tasks.py:31:26: G004 Logging statement uses f-string
   |
29 |         document.status = "Failed"
30 |         document.save()
31 |         logger.exception(f"Error processing document {document_id}: {e}")
   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
32 |         raise
   |

backend/app/config/dsb_user_personal/tasks.py:31:70: TRY401 Redundant exception object included in `logging.exception` call
   |
29 |         document.status = "Failed"
30 |         document.save()
31 |         logger.exception(f"Error processing document {document_id}: {e}")
   |                                                                      ^ TRY401
32 |         raise
   |


Found 615 errors.
